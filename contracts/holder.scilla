scilla_version 0

(***************************************************)
(*               Associated library                *)
(***************************************************)
library Holder

let uint128_zero = Uint128 0

let one_msg =
  fun (msg : Message) =>
    let nil_msg = Nil {Message} in
    Cons {Message} msg nil_msg

(***************************************************)
(*             The contract definition             *)
(***************************************************)

contract Holder(
  init_azil_ssn_address               : ByStr20,
  init_proxy_staking_contract_address : ByStr20
)
(*  Parameters *)

(* Mutable fields *)
field azil_ssn_address                : ByStr20 = init_azil_ssn_address
field proxy_staking_contract_address  : ByStr20 = init_proxy_staking_contract_address

(************************************************************)
(* @dev: Admin actions                                      *)
(************************************************************)

transition ChangeAzilSSNAddress(address: ByStr20)
  azil_ssn_address := address;

  e = { _eventname: "ChangeAzilSSNAddress"; address: address };
  event e
end

transition ChangeProxyStakingContractAddress(address: ByStr20)
  proxy_staking_contract_address := address;

  e = { _eventname: "ChangeProxyStakingContractAddress"; address: address };
  event e
end

procedure ProxyWithdrawStakeAmt(ssnaddr: ByStr20, proxy_staking_contract_addr: ByStr20, amount: Uint128)
  msg = {_tag: "WithdrawStakeAmt"; _recipient: proxy_staking_contract_addr; _amount: uint128_zero;
  ssnaddr: ssnaddr; amount: amount};
  msgs = one_msg msg;
  send msgs
end

transition WithdrawStakeAmt(amount: Uint128)
  (* TODO
  to_ssn <- azil_ssn_address;
  proxy_staking_contract_addr <- proxy_staking_contract_address;

  ProxyWithdrawStakeAmt ssnaddr proxy_staking_contract_addr amount *)
end
