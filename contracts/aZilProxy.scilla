scilla_version 0

library AZilProxy

type Error =
  | AdminValidationFailed
  | StagingAdminValidationFailed
  | StagingAdminNotExists

let make_error =
  fun (result: Error) =>
    let result_code =
      match result with
      | AdminValidationFailed => "AdminValidationFailed"
      | StagingAdminValidationFailed => "StagingAdminValidationFailed"
      | StagingAdminNotExists => "StagingAdminNotExists"
      end
    in
    { _exception: "Error"; code: result_code }

let zero = Uint128 0

let one_msg =
  fun (m: Message) =>
    let e = Nil {Message} in
    Cons {Message} m e

contract AZilProxy(
  init_aimpl_address: ByStr20,
  init_admin_address: ByStr20
)

(* Mutable fields *)
field aimpl_address: ByStr20 = init_aimpl_address
field admin_address: ByStr20 = init_admin_address
field staging_admin_address: Option ByStr20 = None {ByStr20}

(***************************************************)
(*              Procedures                         *)
(***************************************************)
procedure ThrowError(err: Error)
  e = make_error err;
  throw e
end

procedure IsAdmin(initiator: ByStr20)
  var_admin_address <- admin_address;
  is_admin = builtin eq initiator var_admin_address;
  match is_admin with
  | True  =>
  | False =>
    e = AdminValidationFailed;
    ThrowError e
  end
end

(***************************************************)
(*              Proxy Transitions                  *)
(***************************************************)
transition UpgradeTo(newImplementation: ByStr20)
  IsAdmin _sender;
  aimpl_address := newImplementation;
  e = {_eventname: "UpgradeTo"; aimpl_address: newImplementation};
  event e
end

transition ChangeAdmin(newAdmin: ByStr20)
  IsAdmin _sender;
  new_staging_admin = Some {ByStr20} newAdmin;
  staging_admin_address := new_staging_admin;
  cur_admin_address <- admin_address;
  e = {_eventname: "ChangeAdmin"; currentAdmin: cur_admin_address; newAdmin: newAdmin};
  event e
end

transition ClaimAdmin()
  staging_admin_o <- staging_admin_address;
  match staging_admin_o with
  | Some staging_admin =>
    is_stagingadmin = builtin eq staging_admin _sender;
    match is_stagingadmin with
    | True =>
      admin_address := _sender;
      tmp_staging_admin = None {ByStr20};
      staging_admin_address := tmp_staging_admin;
      e = {_eventname: "ClaimAdmin"; newAdmin: _sender};
      event e
    | False =>
      e = StagingAdminValidationFailed;
      ThrowError e
    end
  | None =>
    e = StagingAdminNotExists;
    ThrowError e
  end
end

(***************************************************)
(*                Delegator transitions            *)
(***************************************************)
transition DelegateStake()
  current_impl <- aimpl_address;
  accept;
  msg = {_tag: "DelegateStake"; _recipient: current_impl; _amount: _amount; initiator: _sender};
  msgs = one_msg msg;
  send msgs
end

transition WithdrawStakeAmt(amount: Uint128)
  current_impl <- aimpl_address;
  msg = {_tag: "WithdrawStakeAmt"; _recipient: current_impl; _amount: zero; amount: amount; initiator: _sender};
  msgs = one_msg msg;
  send msgs
end

transition CompleteWithdrawal()
  current_impl <- aimpl_address;
  msg = {_tag: "CompleteWithdrawal"; _recipient: current_impl; _amount: zero; initiator: _sender};
  msgs = one_msg msg;
  send msgs
end

transition ZilBalanceOf(address: ByStr20)
  current_impl <- aimpl_address;
  msg = {_tag: "ZilBalanceOf"; _recipient: current_impl; _amount: zero; address: address; initiator: _sender};
  msgs = one_msg msg;
  send msgs
end
