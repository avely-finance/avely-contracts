scilla_version 0

import ListUtils IntUtils

(***************************************************)
(*               Associated library                *)
(***************************************************)
library Buffer

let uint128_zero = Uint128 0

let one_msg =
  fun (msg : Message) =>
    let nil_msg = Nil {Message} in
    Cons {Message} msg nil_msg

(***************************************************)
(*             The contract definition             *)
(***************************************************)

contract Buffer()

(* @dev : To delegate the stake to the contract. *)
(* @param ssnaddr: The address of the SSN to which the deleg wants to stake *)
procedure ProxyDelegate(ssnaddr: ByStr20, proxy_contract_addr: ByStr20, amount: Uint128)
  msg = {_tag: "DelegateStake"; _recipient: proxy_contract_addr; _amount: amount; ssnaddr: ssnaddr};
  msgs = one_msg msg;
  send msgs
end

procedure ProxyReDelegateStake(ssnaddr: ByStr20, to_ssn: ByStr20, proxy_staking_contract_addr: ByStr20, amount: Uint128)
  msg = {_tag: "ReDelegateStake"; _recipient: proxy_staking_contract_addr; _amount: uint128_zero;
        ssnaddr: ssnaddr; to_ssn: to_ssn; amount: amount};
  msgs = one_msg msg;
  send msgs
end

(************************************************************)
(* @dev: Deposit undelegated zil, use our node              *)
(************************************************************)
transition DelegateStake(ssnaddr: ByStr20, proxy_staking_contract_addr: ByStr20)
  accept;
  stake_amt = _amount;

  ProxyDelegate ssnaddr proxy_staking_contract_addr stake_amt
end

transition ReDelegateStake(ssnaddr: ByStr20, to_ssn: ByStr20, proxy_staking_contract_addr: ByStr20, amount: Uint128)
  ProxyReDelegateStake ssnaddr to_ssn proxy_staking_contract_addr amount
end

transition DelegateStakeSuccessCallBack(ssnaddr: ByStr20, amount: Uint128)
  (* We ignore the staking contract callbacks *)
end

transition ReDelegateStakeSuccessCallBack(ssnaddr: ByStr20, amount: Uint128)
  (* We ignore the staking contract callbacks *)
end
