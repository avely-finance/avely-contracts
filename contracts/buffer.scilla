scilla_version 0

(***************************************************)
(*               Associated library                *)
(***************************************************)
library Buffer

let uint128_zero = Uint128 0
let bystr20_zero = 0x0000000000000000000000000000000000000000

type Error =
  | AzilValidationFailed
  | CantFetchZimplAddress
  | ClaimRewardsBufferFundsMismatch
  | ZimplValidationFailed

let make_error =
  fun (result: Error) =>
    let result_code =
      match result with
      | AzilValidationFailed            => "AzilValidationFailed"
      | CantFetchZimplAddress           => "CantFetchZimplAddress"
      | ClaimRewardsBufferFundsMismatch => "ClaimRewardsBufferFundsMismatch"
      | ZimplValidationFailed           => "ZimplValidationFailed"
      end
    in
    { _exception: "Error"; code: result_code }

let one_msg =
  fun (msg : Message) =>
    let nil_msg = Nil {Message} in
    Cons {Message} msg nil_msg

(***************************************************)
(*             The contract definition             *)
(***************************************************)

contract Buffer(
  init_azil_address         : ByStr20,
  init_zproxy_address       : ByStr20
)

field azil_address          : ByStr20 = init_azil_address
field zproxy_address        : ByStr20 = init_zproxy_address

field local_zimpl_address   : ByStr20 = bystr20_zero
field tmp_added_funds       : Uint128 = uint128_zero

(************************************************************)
(* @dev: Procedures                                         *)
(************************************************************)

procedure ThrowError(err: Error)
  e = make_error err;
  throw e
end

procedure RequireAzil()
  var_azil_address <- azil_address;
  is_azil = builtin eq _sender var_azil_address;
  match is_azil with
  | True  =>
  | False =>
    e = AzilValidationFailed;
    ThrowError e
  end
end

procedure FetchZimplAddress()
  proxyAddr <- zproxy_address;
  proxyAddrTypeTest <- & proxyAddr as ByStr20 with contract field implementation : ByStr20 end;
  match proxyAddrTypeTest with
  | Some proxy =>
    zimpl <- & proxy.implementation;
    local_zimpl_address := zimpl
  | None =>
    e = CantFetchZimplAddress;
    ThrowError e
  end
end

procedure RequireZimpl()
  FetchZimplAddress;
  var_zimpl_address <- local_zimpl_address;
  is_zimpl = builtin eq _sender var_zimpl_address;
  match is_zimpl with
  | True  =>
  | False =>
    e = ZimplValidationFailed;
    ThrowError e
  end
end

(* @dev : To delegate the stake to the contract. *)
(* @param ssnaddr: The address of the SSN to which the deleg wants to stake *)
procedure ProxyDelegate(ssnaddr: ByStr20, proxy_contract_addr: ByStr20, amount: Uint128)
  msg = {_tag: "DelegateStake"; _recipient: proxy_contract_addr; _amount: amount; ssnaddr: ssnaddr};
  msgs = one_msg msg;
  send msgs
end

(* @dev : To claim rewards *)
(* @param ssnaddr: The address of the SSN to which the deleg wants to stake *)
procedure ProxyWithdrawStakeRewards(ssnaddr: ByStr20, proxy_contract_addr: ByStr20)
  msg = {_tag: "WithdrawStakeRewards"; _recipient: proxy_contract_addr; _amount: uint128_zero; ssnaddr: ssnaddr};
  msgs = one_msg msg;
  send msgs
end

(* @dev : To request delegator swap rewards *)
(* @param ssnaddr: The address of the SSN to which the deleg wants to stake *)
procedure ProxyRequestDelegatorSwap(proxy_contract_addr: ByStr20, new_deleg_addr: ByStr20)
  msg = {_tag: "RequestDelegatorSwap"; _recipient: proxy_contract_addr; _amount: uint128_zero; new_deleg_addr: new_deleg_addr};
  msgs = one_msg msg;
  send msgs
end

(************************************************************)
(* @dev: IsZimpl actions                                    *)
(************************************************************)

transition AddFunds()
  RequireZimpl;
  accept;
  tmp_added_funds := _amount
end

(************************************************************)
(* @dev: Deposit undelegated zil, use our node              *)
(************************************************************)
transition DelegateStake(ssnaddr: ByStr20)
  RequireAzil;
  accept;
  stake_amt = _amount;

  var_zproxy_address <- zproxy_address;

  ProxyDelegate ssnaddr var_zproxy_address stake_amt
end

transition DelegateStakeSuccessCallBack(ssnaddr: ByStr20, amount: Uint128)
  RequireZimpl;
  o_azil_address <- azil_address;

  msg = { _tag : "DelegateStakeSuccessCallBack"; _recipient : o_azil_address; _amount : uint128_zero; amount: amount };
  msgs = one_msg msg;
  send msgs
end

transition ClaimRewards(ssnaddr: ByStr20)
  RequireAzil;
  tmp_added_funds := uint128_zero;

  var_zproxy_address <- zproxy_address;

  ProxyWithdrawStakeRewards ssnaddr var_zproxy_address
end

transition ConfirmDelegatorSwap(requestor: ByStr20)
  RequireAzil;

  var_zproxy_address <- zproxy_address;

  msg = {_tag: "ConfirmDelegatorSwap"; _recipient: var_zproxy_address; _amount: uint128_zero; requestor: requestor};
  msgs = one_msg msg;
  send msgs
end

transition RejectDelegatorSwap(requestor: ByStr20)
  RequireAzil;

  var_zproxy_address <- zproxy_address;

  msg = {_tag: "RejectDelegatorSwap"; _recipient: var_zproxy_address; _amount: uint128_zero; requestor: requestor};
  msgs = one_msg msg;
  send msgs
end

transition WithdrawStakeRewardsSuccessCallBack(ssnaddr: ByStr20, rewards: Uint128)
  RequireZimpl;
  added_funds <- tmp_added_funds;

  (* reset tmp variable *)
  tmp_added_funds := uint128_zero;

  (* check if Zimpl sends correct data *)
  amount_eq = builtin eq added_funds rewards;
  match amount_eq with
  | False =>
    e = ClaimRewardsBufferFundsMismatch;
    ThrowError e
  | True =>
    o_azil_address <- azil_address;

    msg = { _tag : "ClaimRewardsSuccessCallBack"; _recipient : o_azil_address; _amount : rewards };
    msgs = one_msg msg;
    send msgs
  end
end

transition RequestDelegatorSwap(new_deleg_addr: ByStr20)
  RequireAzil;

  var_zproxy_address <- zproxy_address;

  ProxyRequestDelegatorSwap var_zproxy_address new_deleg_addr
end

transition ReDelegateStake(ssnaddr: ByStr20, to_ssn: ByStr20, amount: Uint128)
  RequireAzil;

  var_zproxy_address <- zproxy_address;

  msg = {_tag: "ReDelegateStake"; _recipient: var_zproxy_address; _amount: uint128_zero; ssnaddr: ssnaddr; to_ssn: to_ssn; amount: amount};
  msgs = one_msg msg;
  send msgs
end

transition ReDelegateStakeSuccessCallBack(ssnaddr: ByStr20, tossn: ByStr20, amount: Uint128)
  RequireZimpl
  (* nop *)
end
