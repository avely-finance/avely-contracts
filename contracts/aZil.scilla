scilla_version 0

import ListUtils IntUtils

(***************************************************)
(*               Associated library                *)
(***************************************************)
library AZil

type Error =
  | ReDelegInvalidSSNAddr

let make_error =
  fun (result: Error) =>
    let result_code =
      match result with
      | ReDelegInvalidSSNAddr => Int32 -21
      end
    in
    { _exception: "Error"; code: result_code }

let uint128_to_uint256 : Uint128 -> Uint256 =
  fun (x : Uint128) =>
    let ox256 = builtin to_uint256 x in
      match ox256 with
      | None =>
        (* this never happens, hence we throw a division by zero exception just in case *)
        let zero = Uint256 0 in
        builtin div zero zero
      | Some x256 => x256
      end

let muldiv : Uint128 -> Uint128 -> Uint128 -> Uint128 =
    fun (x : Uint128) =>
    fun (y : Uint128) =>
    fun (z : Uint128) =>
      let x256 = uint128_to_uint256 x in
      let y256 = uint128_to_uint256 y in
      let z256 = uint128_to_uint256 z in
      let x_mul_y256 = builtin mul x256 y256 in
      let res256 = builtin div x_mul_y256 z256 in
      let ores128 = builtin to_uint128 res256 in
      match ores128 with
      | None =>
        (* this must never happen, hence we throw an integer overflow exception *)
        let max_uint128 = Uint128 340282366920938463463374607431768211455 in
        let fourtytwo128 = Uint128 42 in
        builtin mul max_uint128 fourtytwo128
      | Some res128 =>
        res128
      end

let one_msg =
  fun (msg : Message) =>
    let nil_msg = Nil {Message} in
    Cons {Message} msg nil_msg

let uint128_zero = Uint128 0
let uint128_one = Uint128 1
let uint32_one = Uint32 1

(***************************************************)
(*             The contract definition             *)
(***************************************************)

contract AZil(
  azil_ssn_addrress              : ByStr20,
  proxy_staking_contract_address : ByStr20
)
(*  Parameters *)
(* (owner     : ByStr20) *)

(* Mutable fields *)

field totalstakeamount: Uint128 = uint128_zero
field totaltokenamount: Uint128 = uint128_zero

field balances: Map ByStr20 Uint128 = Emp ByStr20 Uint128

(* Procedures *)

procedure ThrowError(err: Error)
  e = make_error err;
  throw e
end

procedure IncreaseTotalStakeAmt(amt: Uint128)
  total_stake_amt <- totalstakeamount;
  new_total_amt = builtin add total_stake_amt amt;
  totalstakeamount := new_total_amt
end

procedure IncreaseTotalTokenAmt(amt: Uint128)
  total_token_amt <- totaltokenamount;
  new_total_amt = builtin add total_token_amt amt;
  totaltokenamount := new_total_amt
end

(* newTokens = amount * totaltokenamount / totalstakeamount *)
procedure Delegate(initiator: ByStr20, stake_amt: Uint128)
  total_token_amt <- totaltokenamount;
  current_stake_amt <- totalstakeamount;

  first_delegation = builtin eq total_token_amt uint128_zero;
  token_amt =
    match first_delegation with
    | True => stake_amt
    | False => muldiv stake_amt total_token_amt current_stake_amt
    end;

  current_token_amount <- balances[initiator];
  match current_token_amount  with
  | Some current_token_amt =>
    new_current_token_amt = builtin add current_token_amt token_amt;
    balances[initiator] := new_current_token_amt
  | None =>
    balances[initiator] := token_amt
  end;

  IncreaseTotalStakeAmt stake_amt;
  IncreaseTotalTokenAmt token_amt
end

(* @dev : To delegate the stake to the contract. *)
(* @param ssnaddr: The address of the SSN to which the deleg wants to stake *)
procedure ProxyDelegate(amount: Uint128)
  msg = {_tag: "DelegateStake"; _recipient: proxy_staking_contract_address; _amount: amount; ssnaddr: azil_ssn_addrress};
  msgs = one_msg msg;
  send msgs
end

procedure ProxyReDelegateStake(ssnaddr: ByStr20, amount: Uint128)
    msg = {_tag: "ReDelegateStake"; _recipient: proxy_staking_contract_address; _amount: uint128_zero;
          ssnaddr: ssnaddr; to_ssn: azil_ssn_addrress; amount: amount};
    msgs = one_msg msg;
    send msgs
end

(************************************************************)
(* @dev: Admin actions                                      *)
(************************************************************)

transition IncreaseTotalStakeAmount(amount: Uint128)
  IncreaseTotalStakeAmt amount;

  e = { _eventname: "IncreaseTotalStakeAmount"; amount: amount };
  event e
end

(************************************************************)
(* @dev: Deposit undelegated zil, use our node              *)
(************************************************************)
transition DelegateStake()
  accept;
  stake_amt = _amount;
  initiator = _sender;

  ProxyDelegate stake_amt;
  Delegate initiator stake_amt;

  e = { _eventname: "DelegateStake"; delegator: initiator; amount: stake_amt };
  event e;

  msg_to_delegator = {_tag : "DelegateStakeSuccessCallBack"; _recipient : initiator; _amount : uint128_zero; amount : stake_amt};
  msg = one_msg msg_to_delegator;
  send msg
end

transition ReDelegateStake(ssnaddr: ByStr20, amount: Uint128)
  same_ssn = builtin eq ssnaddr azil_ssn_addrress;

  match same_ssn with
  | True =>
    e = ReDelegInvalidSSNAddr;
    ThrowError e
  | False =>
    stake_amt = amount;
    initiator = _sender;

    ProxyReDelegateStake ssnaddr stake_amt;
    Delegate initiator stake_amt;

    e = { _eventname: "ReDelegateStakeSuccess"; ssnaddr: ssnaddr; delegator: initiator; delegate_amount: stake_amt };
    event e;

    msg_to_delegator = {_tag : "ReDelegateStakeSuccessCallBack"; _recipient : initiator; _amount : uint128_zero;
                        ssnaddr: ssnaddr; amount : amount};
    msg = one_msg msg_to_delegator;
    send msg
  end
end

(************************************************************)
(* @dev: Returns an account zil amount                      *)
(************************************************************)
transition ZilBalanceOf(address: ByStr20)
  total_token_amt <- totaltokenamount;
  total_stake_amt <- totalstakeamount;

  current_token_amount <- balances[address];

  balance =
    match current_token_amount with
    | Some current_token_amt => muldiv current_token_amt total_stake_amt total_token_amt
    | None => uint128_zero
    end;

  msg_to_sender = { _tag : "ZilBalanceOfCallBack"; _recipient : _sender; _amount : uint128_zero; balance : balance};
  msgs = one_msg msg_to_sender;
  send msgs
end


transition DelegateStakeSuccessCallBack(ssnaddr: ByStr20, amount: Uint128)
  (* We ignore the staking contract callbacks *)
end

transition ReDelegateStakeSuccessCallBack(ssnaddr: ByStr20, amount: Uint128)
  (* We ignore the staking contract callbacks *)
end
