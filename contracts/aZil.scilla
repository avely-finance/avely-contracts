scilla_version 0

import ListUtils IntUtils BoolUtils PairUtils

(***************************************************)
(*               Associated library                *)
(***************************************************)
library AZil

type Withdrawal =
  | Withdrawal of Uint128 Uint128

type Error =
  | AdminValidationFailed
  | BufferAddrUnknown
  | BufferAlreadyDrained
  | BufferNotDrained
  | BufferOrHolderValidationFailed
  | BuffersEmpty
  | CantFetchZimplBufferExistsAtSSN
  | CantFetchZimplFields
  | ChownStakeCantFetchRemote
  | ChownStakeReDelegateAzilSsn
  | ChownStakeSwapRequestNotFound
  | ClaimWithdrawalNoUnbonded
  | CompleteWithdrawalFundsMismatch
  | DelegAddrUnknown
  | DelegDoesNotExistAtSSN
  | DelegHasNoSufficientAmt
  | DelegStakeFundsMismatch
  | DelegStakeNotEnough
  | InvalidTotalAmt
  | InvalidRewardsFee
  | HolderAlreadySet
  | NotPausedIn
  | NotPausedOut
  | NotPausedZrc2
  | OwnerValidationFailed
  | PausedIn
  | PausedOut
  | PausedZrc2
  | StagingOwnerNotExists
  | StagingOwnerValidationFailed
  | IsSender
  | InsufficientFunds
  | InsufficientAllowance

let make_error =
  fun (result: Error) =>
    let result_code =
      match result with
      | AdminValidationFailed            => "AdminValidationFailed"
      | BufferAddrUnknown                => "BufferAddrUnknown"
      | BufferAlreadyDrained             => "BufferAlreadyDrained"
      | BufferNotDrained                 => "BufferNotDrained"
      | BufferOrHolderValidationFailed   => "BufferOrHolderValidationFailed"
      | BuffersEmpty                     => "BuffersEmpty"
      | CantFetchZimplBufferExistsAtSSN  => "CantFetchZimplBufferExistsAtSSN"
      | CantFetchZimplFields             => "CantFetchZimplFields"
      | ChownStakeCantFetchRemote        => "ChownStakeCantFetchRemote"
      | ChownStakeReDelegateAzilSsn      => "ChownStakeReDelegateAzilSsn"
      | ChownStakeSwapRequestNotFound    => "ChownStakeSwapRequestNotFound"
      | ClaimWithdrawalNoUnbonded        => "ClaimWithdrawalNoUnbonded"
      | CompleteWithdrawalFundsMismatch  => "CompleteWithdrawalFundsMismatch"
      | DelegAddrUnknown                 => "DelegAddrUnknown"
      | DelegDoesNotExistAtSSN           => "DelegDoesNotExistAtSSN"
      | DelegHasNoSufficientAmt          => "DelegHasNoSufficientAmt"
      | DelegStakeFundsMismatch          => "DelegStakeFundsMismatch"
      | DelegStakeNotEnough              => "DelegStakeNotEnough"
      | InvalidRewardsFee                => "InvalidRewardsFee"
      | InvalidTotalAmt                  => "InvalidTotalAmt"
      | HolderAlreadySet                 => "HolderAlreadySet"
      | NotPausedIn                      => "NotPausedIn"
      | NotPausedOut                     => "NotPausedOut"
      | NotPausedZrc2                    => "NotPausedZrc2"
      | OwnerValidationFailed            => "OwnerValidationFailed"
      | PausedOut                        => "PausedOut"
      | PausedIn                         => "PausedIn"
      | PausedZrc2                       => "PausedZrc2"
      | StagingOwnerNotExists            => "StagingOwnerNotExists"
      | StagingOwnerValidationFailed     => "StagingOwnerValidationFailed"
      | IsSender                         => "IsSender"
      | InsufficientFunds                => "InsufficientFunds"
      | InsufficientAllowance            => "InsufficientAllowance"
      end
    in
    { _exception: "Error"; code: result_code }

let bystr20_eq : ByStr20 -> ByStr20 -> Bool =
  fun (x : ByStr20) =>
  fun (y : ByStr20) =>
    builtin eq x y

let uint128_to_uint256 : Uint128 -> Uint256 =
  fun (x : Uint128) =>
    let ox256 = builtin to_uint256 x in
      match ox256 with
      | None =>
        (* this never happens, hence we throw a division by zero exception just in case *)
        let zero = Uint256 0 in
        builtin div zero zero
      | Some x256 => x256
      end

let muldiv : Uint128 -> Uint128 -> Uint128 -> Uint128 =
    fun (x : Uint128) =>
    fun (y : Uint128) =>
    fun (z : Uint128) =>
      let x256 = uint128_to_uint256 x in
      let y256 = uint128_to_uint256 y in
      let z256 = uint128_to_uint256 z in
      let x_mul_y256 = builtin mul x256 y256 in
      let res256 = builtin div x_mul_y256 z256 in
      let ores128 = builtin to_uint128 res256 in
      match ores128 with
      | None =>
        (* this must never happen, hence we throw an integer overflow exception *)
        let max_uint128 = Uint128 340282366920938463463374607431768211455 in
        let fourtytwo128 = Uint128 42 in
        builtin mul max_uint128 fourtytwo128
      | Some res128 =>
        res128
      end

let one_msg =
  fun (msg : Message) =>
    let nil_msg = Nil {Message} in
    Cons {Message} msg nil_msg

let two_msgs =
  fun (msg1 : Message) =>
  fun (msg2 : Message) =>
    let msgs_tmp = one_msg msg2 in
    Cons {Message} msg1 msgs_tmp

let false = False
let true = True
let uint128_zero = Uint128 0
let uint128_one = Uint128 1
let uint32_zero = Uint32 0
let uint32_one = Uint32 1
let bystr20_zero = 0x0000000000000000000000000000000000000000
let fee_denom = Uint128 10000 (* fee denominated in basis points (1 b.p. = 0.01%) *)

let option_value =
  tfun 'A =>
  fun (default: 'A) =>
  fun (opt_val: Option 'A) =>
    match opt_val with
    | Some v => v
    | None => default
    end

let option_uint32_value =
  let f = @option_value Uint32 in
  f uint32_zero

let option_uint128_value =
  let f = @option_value Uint128 in
  f uint128_zero

let option_bystr20_value =
  let f = @option_value ByStr20 in
  f bystr20_zero

let list_bystr20_length =
  fun (l : List ByStr20) =>
    let flist_length = @list_length ByStr20 in
    flist_length l

let addfunds_tag = "AddFunds"

(* active buffer is remainder of division of lastrewardcycle by buffers count *)
let get_active_buffer_addr =
  fun (l : List ByStr20) =>
  fun (lastrewardcycle : Uint32) =>
    let l_length = list_bystr20_length l in
    let active = builtin rem lastrewardcycle l_length in
    let flist_nth = @list_nth ByStr20 in
    let addr_o = flist_nth active l in
    option_bystr20_value addr_o

(* remove not unbonded blocks from blocks list *)
let leave_unbonded =
  fun (current_bnum: BNum) =>
  fun (bnum_req_delta: Uint128) =>
  fun (blist: List BNum) =>
    let is_unbonded =
      fun (withdraw_inited_bnum: BNum) =>
        let btest = builtin badd withdraw_inited_bnum bnum_req_delta in
        builtin blt btest current_bnum in
    let filterBNum = @list_filter BNum in
    filterBNum is_unbonded blist

(* check if address is buffer address *)
let is_buffer_addr =
  fun(l: List ByStr20) =>
  fun(addr: ByStr20) =>
    let feq = bystr20_eq addr in
    let flist_exists = @list_exists ByStr20 in
    flist_exists feq l

(* sum the integer type values in a map *)
let sum_amount = fun(m: Map ByStr20 Uint128) =>
  (* create a list of (key,values) pairs of the map *)
  let l = builtin to_list m in
  (* use fold to sum up the second elements of all pairs *)
  let folder = @list_foldl (Pair ByStr20 Uint128) Uint128 in
  let init = Uint128 0 in (* initialize the accumulator at 0 *)
  let addition = (* add elements to accumulator: extract second element of Pair and add *)
    fun(acc: Uint128) =>
    fun(pair: Pair ByStr20 Uint128) =>
      let the_int = @snd ByStr20 Uint128 in (* get the int *)
      let int = the_int pair in
      builtin add acc int in (* add int to accumulator *)
    folder addition init l (* apply to entire list of pairs *)

(***************************************************)
(*             The contract definition             *)
(***************************************************)

contract AZil(
  contract_owner            : ByStr20,
  init_admin_address        : ByStr20,
  init_azil_ssn_address     : ByStr20,
  init_zimpl_address        : ByStr20,
  init_ssn_addresses        : List ByStr20,
  name                      : String,
  symbol                    : String,
  decimals                  : Uint32,
  init_supply               : Uint128
)

field owner_address         : ByStr20 = contract_owner
field admin_address         : ByStr20 = init_admin_address
field azil_ssn_address      : ByStr20 = init_azil_ssn_address
field treasury_address      : ByStr20 = init_azil_ssn_address
field zimpl_address         : ByStr20 = init_zimpl_address
field holder_address        : ByStr20 = bystr20_zero
field buffers_addresses     : List ByStr20 = Nil {ByStr20}
field ssn_addresses         : List ByStr20 = Nil {ByStr20}
field staging_owner_address : Option ByStr20 = None {ByStr20}

field is_paused_in  : Bool = True
field is_paused_out : Bool = True
field is_paused_zrc2: Bool = True

(* 10 ZIL expresssed in Qa where 1 ZIL = 10^12 Qa *)
field mindelegstake     : Uint128 = Uint128 10000000000000
field rewards_fee       : Uint128 = uint128_zero
field totalstakeamount  : Uint128 = uint128_zero
field autorestakeamount : Uint128 = uint128_zero
field total_supply      : Uint128 = uint128_zero

(* Delegator -> Token balance *)
field balances: Map ByStr20 Uint128 = Emp ByStr20 Uint128

(* Sender -> (Spender -> Allowance) *)
field allowances: Map ByStr20 (Map ByStr20 Uint128) = Emp ByStr20 (Map ByStr20 Uint128)

(* BlockNumber -> AddressOfDeleg ->  Withdrawal of Token:Uint128 Stake:Uint128 *)
field withdrawal_pending:              Map BNum (Map ByStr20 Withdrawal) = Emp BNum (Map ByStr20 Withdrawal)

(* AddressOfDeleg -> BlockNumber -> Withdrawal of Token:Uint128 Stake:Uint128 *)
field withdrawal_pending_of_delegator: Map ByStr20 (Map BNum Withdrawal) = Emp ByStr20 (Map BNum Withdrawal)

(* AddressOfDeleg ->  Deposit *)
field withdrawal_unbonded: Map ByStr20 Withdrawal = Emp ByStr20 Withdrawal

field buffer_drained_cycle: Map ByStr20 Uint32 = Emp ByStr20 Uint32

field tmp_delegator: Option ByStr20 = None {ByStr20}
field tmp_stake_delegate_amount: Uint128 = uint128_zero
field tmp_complete_withdrawal_available: Uint128 = uint128_zero
field tmp_buffer_exists_at_ssn: Bool = False
field tmp_buffer: ByStr20 = bystr20_zero
field tmp_bnum: BNum = BNum 0

field local_bnum_req: Uint128 = Uint128 35000
field local_lastrewardcycle: Uint32 = uint32_one

(************************************************************)
(* @dev: Procedures                                         *)
(************************************************************)

procedure ThrowError(err: Error)
  e = make_error err;
  throw e
end

procedure RequireAdmin()
  contractadmin_tmp <- admin_address;
  is_admin = builtin eq _sender contractadmin_tmp;
  match is_admin with
  | True  =>
  | False =>
    e = AdminValidationFailed;
    ThrowError e
  end
end

procedure RequireOwner()
  owner <- owner_address;
  is_owner = builtin eq _sender owner;
  match is_owner with
  | True  =>
  | False =>
    e = OwnerValidationFailed;
    ThrowError e
  end
end

procedure RequireNotPausedIn()
  paused <- is_paused_in;
  match paused with
  | False =>
  | True =>
    error = PausedIn;
    ThrowError error
  end
end

procedure RequireNotPausedOut()
  paused <- is_paused_out;
  match paused with
  | False =>
  | True =>
    error = PausedOut;
    ThrowError error
  end
end

procedure RequireNotPausedZrc2()
  paused <- is_paused_zrc2;
  match paused with
  | False =>
  | True =>
    error = PausedZrc2;
    ThrowError error
  end
end

procedure RequireBuffers(buffers: List ByStr20)
  llen = list_bystr20_length buffers;
  buffers_empty = builtin eq uint32_zero llen;
  match buffers_empty with
  | True =>
    error = BuffersEmpty;
    ThrowError error
  | False =>
  end
end

procedure RequireNotDrainedBuffer(buffer_addr: ByStr20, cycle: Uint32)
  o_buffer_cycle <- buffer_drained_cycle[buffer_addr];
  match o_buffer_cycle with
  | Some buffer_cycle =>
    is_not_drained = builtin lt buffer_cycle cycle;
    match is_not_drained with
    | True =>
    | False =>
      e = BufferAlreadyDrained;
      ThrowError e
    end
  | None =>
  end
end

procedure RequireDrainedBuffer(buffer_addr: ByStr20, cycle: Uint32)
  o_buffer_cycle <- buffer_drained_cycle[buffer_addr];
  match o_buffer_cycle with
  | Some buffer_cycle =>
    is_not_drained = builtin lt buffer_cycle cycle;
    match is_not_drained with
    | True =>
      e = BufferNotDrained;
      ThrowError e
    | False =>
    end
  | None =>
    e = BufferNotDrained;
    ThrowError e
  end
end

procedure RequireBufferOrHolder()
  buffers_addrs <- buffers_addresses;
  is_buffer = is_buffer_addr buffers_addrs _sender;

  holder <- holder_address;
  is_holder = builtin eq _sender holder;

  is_buffer_or_holder = orb is_buffer is_holder;

  match is_buffer_or_holder with
  | True  =>
  | False =>
    e = BufferOrHolderValidationFailed;
    ThrowError e
  end
end

procedure TransferFunds(tag: String, amt: Uint128, recipient: ByStr20)
  msg = {_tag: tag; _recipient: recipient; _amount: amt};
  msgs = one_msg msg;
  send msgs
end

(* fetch state fields from ssnlist contract *)
procedure FetchRemoteZimplFields()
  implAddr <- zimpl_address;
  implAddrTypeTest <- & implAddr as ByStr20 with contract field bnum_req : Uint128, field lastrewardcycle: Uint32 end;
  match implAddrTypeTest with
  | Some z =>
    bnum_req <- & z.bnum_req;
    local_bnum_req := bnum_req;
    lrc <- & z.lastrewardcycle;
    local_lastrewardcycle := lrc
  | None =>
    e = CantFetchZimplFields;
    ThrowError e
  end
end

(* check if buffer address exists at deposit_amt_deleg map of ssnlist contract *)
procedure FetchRemoteBufferExistsAtSSN(buffer_addr: ByStr20)
  implAddr <- zimpl_address;
  implAddrTypeTest <- & implAddr as ByStr20 with contract
    field deposit_amt_deleg: Map ByStr20 (Map ByStr20 Uint128),
    field lastrewardcycle: Uint32
  end;
  match implAddrTypeTest with
  | Some z =>
    lrc <- & z.lastrewardcycle;
    local_lastrewardcycle := lrc;
    o_deposit_amt_deleg <- & z.deposit_amt_deleg[buffer_addr];
    match o_deposit_amt_deleg with
    | Some amt =>
      tmp_buffer_exists_at_ssn := true
    | None =>
      tmp_buffer_exists_at_ssn := false
    end
  | None =>
      e = CantFetchZimplBufferExistsAtSSN;
      ThrowError e
  end
end

(************************************************************)
(* @dev: Holder & Buffer actions                            *)
(************************************************************)

procedure HolderWithdrawStakeAmt(ssnaddr: ByStr20, amount: Uint128)
  holder_addr <- holder_address;
  msg = {_tag: "WithdrawStakeAmt"; _recipient: holder_addr; _amount: uint128_zero; ssnaddr: ssnaddr; amount: amount};
  msgs = one_msg msg;
  send msgs
end

procedure BufferConfirmDelegatorSwap(buffer_addr: ByStr20, requestor: ByStr20)
  msg = { _tag: "ConfirmDelegatorSwap"; _recipient: buffer_addr; _amount: uint128_zero; requestor: requestor };
  msgs = one_msg msg;
  send msgs
end

procedure BufferRejectDelegatorSwap(buffer_addr: ByStr20, requestor: ByStr20)
  msg = { _tag: "RejectDelegatorSwap"; _recipient: buffer_addr; _amount: uint128_zero; requestor: requestor };
  msgs = one_msg msg;
  send msgs
end

procedure HolderCompleteWithdrawal()
  holder_addr <- holder_address;
  msg = { _tag: "CompleteWithdrawal"; _recipient: holder_addr; _amount: uint128_zero };
  msgs = one_msg msg;
  send msgs
end

procedure BufferReDelegate(buffer_addr: ByStr20, ssnaddr: ByStr20, to_ssn: ByStr20, amount: Uint128)
  msg = { _tag: "ReDelegateStake"; _recipient: buffer_addr; _amount: uint128_zero; ssnaddr: ssnaddr; to_ssn: to_ssn; amount: amount };
  msgs = one_msg msg;
  send msgs
end

(* @dev : To delegate the stake to the contract through buffer. *)
procedure BufferDelegate(amount: Uint128)
  FetchRemoteZimplFields;
  cycle <- local_lastrewardcycle;
  buffer_addrs <- buffers_addresses;
  buffer_addr = get_active_buffer_addr buffer_addrs cycle;
  ssnaddr <- azil_ssn_address;
  msg = {_tag: "DelegateStake"; _recipient: buffer_addr; _amount: amount; ssnaddr: ssnaddr};
  msgs = one_msg msg;
  send msgs
end

procedure ClaimRewards(addr: ByStr20, ssnaddr: ByStr20)
  msg = { _tag: "ClaimRewards"; _recipient: addr; _amount: uint128_zero; ssnaddr: ssnaddr };
  msgs = one_msg msg;
  send msgs
end

procedure RequestDelegatorSwap(from: ByStr20, to: ByStr20)
  msg = { _tag: "RequestDelegatorSwap"; _recipient: from; _amount: uint128_zero; new_deleg_addr: to};
  msgs = one_msg msg;
  send msgs
end

procedure ConfirmDelegatorSwap(from: ByStr20, to: ByStr20)
  msg = { _tag: "ConfirmDelegatorSwap"; _recipient: to; _amount: uint128_zero; requestor: from};
  msgs = one_msg msg;
  send msgs
end

(************************************************************)
(* @dev: aZil actions                                       *)
(************************************************************)

procedure IsDelegStakeSufficient(amount: Uint128)
  mindelegstake_l <- mindelegstake;
  suffi =  uint128_le mindelegstake_l amount;
  match suffi with
  | True =>
  | False =>
    e = DelegStakeNotEnough;
    ThrowError e
  end
end

procedure IncreaseTotalStakeAmt(amt: Uint128)
  total_stake_amt <- totalstakeamount;
  new_total_amt = builtin add total_stake_amt amt;
  totalstakeamount := new_total_amt
end

procedure IncreaseTotalSupplyAmt(amt: Uint128)
  total_supply_amt <- total_supply;
  new_total_amt = builtin add total_supply_amt amt;
  total_supply := new_total_amt
end

procedure IncreaseAutoRestakeAmt(amt: Uint128)
  auto_restake_amt <- autorestakeamount;
  new_total_amt = builtin add auto_restake_amt amt;
  autorestakeamount := new_total_amt
end

procedure DecreaseTotalStakeAmt(amt: Uint128)
  current_amt <- totalstakeamount;
  valid = uint128_le amt current_amt;
  match valid with
  | True =>
    new_amt = builtin sub current_amt amt;
    totalstakeamount := new_amt
  | False =>
    e = InvalidTotalAmt;
    ThrowError e
  end
end

procedure DecreaseTotalSupplyAmt(amt: Uint128)
  current_amt <- total_supply;
  valid = uint128_le amt current_amt;
  match valid with
  | True =>
    new_amt = builtin sub current_amt amt;
    total_supply := new_amt
  | False =>
    e = InvalidTotalAmt;
    ThrowError e
  end
end

procedure TruncateDeleg(deleg: ByStr20)
  delete balances[deleg]
end

(* newTokens = amount * total_supply / totalstakeamount *)
procedure UpdateTokenBalance(initiator: ByStr20, stake_amt: Uint128)
  total_supply_amt <- total_supply;
  current_stake_amt <- totalstakeamount;

  first_delegation = builtin eq total_supply_amt uint128_zero;
  token_amt =
    match first_delegation with
    | True => stake_amt
    | False => muldiv stake_amt total_supply_amt current_stake_amt
    end;

  current_token_amount <- balances[initiator];
  match current_token_amount  with
  | Some current_token_amt =>
    new_current_token_amt = builtin add current_token_amt token_amt;
    balances[initiator] := new_current_token_amt
  | None =>
    balances[initiator] := token_amt
  end;

  IncreaseTotalStakeAmt stake_amt;
  IncreaseTotalSupplyAmt token_amt
end

procedure AdjustDeleg(deleg: ByStr20, total_amount: Uint128, withdraw_amount: Uint128)
  sufficient = uint128_le withdraw_amount total_amount;
  match sufficient with
  | True =>
    need_truncate =  builtin eq withdraw_amount total_amount;
    match need_truncate with
    | True =>
      (* Remove all info map recorded for this deleg *)
      TruncateDeleg deleg
    | False =>
      (* Readjust all rest deleg to this cycle *)
      rest_deleg = builtin sub total_amount withdraw_amount;
      (* rest delegate should also meet mindelegstake *)
      IsDelegStakeSufficient rest_deleg;
      TruncateDeleg deleg;
      (* Refer to transition TruncateDeleg, here we don't use Fillin transition because we *)
      (* know they are all empty, and this can reduce some gasfee *)
      balances[deleg] := rest_deleg
    end
  | False =>
    e = DelegHasNoSufficientAmt;
    ThrowError e
  end
end

procedure WithdrawalStakeAmt(initiator: ByStr20, withdraw_token_amt: Uint128)
  current_token_amount <- balances[initiator];
  azil_ssn_addr <- azil_ssn_address;

  match current_token_amount with
  | Some current_token_amt =>
    AdjustDeleg initiator current_token_amt withdraw_token_amt;

    (* Illegal withdraw amount could be handled in procedure AdjustDeleg *)
    (* Calculate token to zil to withdraw *)
    total_supply_amt <- total_supply;
    total_stake_amt <- totalstakeamount;
    withdraw_stake_amt = muldiv withdraw_token_amt total_stake_amt total_supply_amt;

    withdrawal_bnum <- & BLOCKNUMBER;
    withdraw_pending_o <- withdrawal_pending[withdrawal_bnum][initiator];

    (* Upsert pending withdrawal *)
    match withdraw_pending_o with
    | Some (Withdrawal token stake) =>
      new_withdraw_token_amt = builtin add token withdraw_token_amt;
      new_withdraw_stake_amt = builtin add stake withdraw_stake_amt;
      pending_withdrawal = Withdrawal new_withdraw_token_amt new_withdraw_stake_amt;
      withdrawal_pending[withdrawal_bnum][initiator] := pending_withdrawal;
      withdrawal_pending_of_delegator[initiator][withdrawal_bnum] := pending_withdrawal
    | None =>
      pending_withdrawal = Withdrawal withdraw_token_amt withdraw_stake_amt;
      withdrawal_pending[withdrawal_bnum][initiator] := pending_withdrawal;
      withdrawal_pending_of_delegator[initiator][withdrawal_bnum] := pending_withdrawal
    end;

    e = { _eventname: "WithdrawStakeAmt"; ssn_addr: azil_ssn_addr; deleg_address: initiator; withdraw_amount:withdraw_token_amt; withdraw_stake_amount:withdraw_stake_amt };
    event e;

    (* Subtract withdrawn amounts from total counters *)
    DecreaseTotalStakeAmt withdraw_stake_amt;
    DecreaseTotalSupplyAmt withdraw_token_amt;

    (* call Holder contract *)
    HolderWithdrawStakeAmt azil_ssn_addr withdraw_stake_amt
  | None =>
    e = DelegDoesNotExistAtSSN;
    ThrowError e
  end
end

(* We can receive two types of callback: *)
(*   1. Autorestake. We need to increase internal total ZIL balance. *)
(*   2. User delegate. We need to change a user balance  *)
procedure ProcessDelegateStakeSuccessCallBack(delegator: ByStr20, amount: Uint128)
  is_autorestake = builtin eq delegator _this_address;

  match is_autorestake with
  | True =>
    IncreaseTotalStakeAmt amount;
    autorestakeamount := uint128_zero
  | False =>
    UpdateTokenBalance delegator amount;

    (* Reset tmp variables *)
    tmp_stake_delegate_amount := uint128_zero;
    reset_delegator = None {ByStr20};
    tmp_delegator := reset_delegator;


    msg_to_delegator = {_tag : "DelegateStakeSuccessCallBack"; _recipient : delegator; _amount : uint128_zero; amount : amount};
    msg = one_msg msg_to_delegator;
    send msg
  end
end

(*
  tmp_complete_withdrawal_available += Withdrawal.stake
  withdrawal_unbonded[delegator] += Withdrawal; //create if none
*)
procedure CalculateTotalWithdrawalBlock(deleg_withdrawal: Pair ByStr20 Withdrawal)
  match deleg_withdrawal with
  | Pair delegator withdrawal =>
    match withdrawal with
    | Withdrawal withdraw_token_amt withdraw_stake_amt =>
      (* update total stake withdraw amount *)
      current_amt <- tmp_complete_withdrawal_available;
      current_amt = builtin add current_amt withdraw_stake_amt;
      tmp_complete_withdrawal_available := current_amt;
      (* upsert unbonded withdrawal for delegator *)
      withdrawal_unbonded_o <- withdrawal_unbonded[delegator];
      match withdrawal_unbonded_o with
      | Some (Withdrawal token stake) =>
        updated_token = builtin add token withdraw_token_amt;
        updated_stake = builtin add stake withdraw_stake_amt;
        unbonded_withdrawal = Withdrawal updated_token updated_stake;
        withdrawal_unbonded[delegator] := unbonded_withdrawal
      | None =>
        withdrawal_unbonded[delegator] := withdrawal
      end
    end
  end
end

procedure CleanWithdrawalDeleg(deleg: ByStr20)
  o_withdrawal_pending_of_delegator <- withdrawal_pending_of_delegator[deleg];
  match o_withdrawal_pending_of_delegator with
  | Some var_withdrawal_pending_of_delegator =>
    map_size = builtin size var_withdrawal_pending_of_delegator;
    is_map_empty = builtin eq map_size uint32_zero;
    match is_map_empty with
    | True => (* empty map *)
      delete withdrawal_pending_of_delegator[deleg]
    | False => (* contains other records *)
    end
  | None => (* nothing to delete *)
  end
end

procedure DeleteWithdrawalDelegBnum(pair_deleg_bnum: Pair ByStr20 Withdrawal)
  match pair_deleg_bnum with
  | Pair deleg withdrawal =>
    bnum <- tmp_bnum;
    delete withdrawal_pending_of_delegator[deleg][bnum];
    CleanWithdrawalDeleg deleg
  end
end

(*
  foreach withdrawal_pending[bnum] as Pair deleg Withdrawal
  then delete withdrawal_pending[bnum]
*)
procedure CalculateTotalWithdrawal(bnum: BNum)
  map_deleg_amount_o <- withdrawal_pending[bnum];
  match map_deleg_amount_o with
  | Some map_deleg_amount =>
    list_deleg_amount = builtin to_list map_deleg_amount;
    forall list_deleg_amount CalculateTotalWithdrawalBlock;
    tmp_bnum := bnum;
    forall list_deleg_amount DeleteWithdrawalDelegBnum
  | None =>
  end;
  delete withdrawal_pending[bnum]
end

(************************************************************)
(* @dev: Admin actions                                      *)
(************************************************************)

transition PauseIn()
  RequireOwner;
  RequireNotPausedIn;

  is_paused_in := true;
  e = { _eventname: "PauseIn"; is_paused_in: uint32_one };
  event e
end

transition UnPauseIn()
  RequireOwner;

  paused <- is_paused_in;
  match paused with
  | True =>
  | False =>
    error = NotPausedIn;
    ThrowError error
  end;

  var_buffers <- buffers_addresses;
  RequireBuffers var_buffers;

  is_paused_in := false;
  e = { _eventname: "UnPauseIn"; is_paused_in: uint32_zero };
  event e
end

transition PauseOut()
  RequireOwner;
  RequireNotPausedOut;

  is_paused_out := true;
  e = { _eventname: "PauseOut"; is_paused_out: uint32_one };
  event e
end

transition UnPauseOut()
  RequireOwner;

  paused <- is_paused_out;
  match paused with
  | True =>
  | False =>
    error = NotPausedOut;
    ThrowError error
  end;

  is_paused_out := false;
  e = { _eventname: "UnPauseOut"; is_paused_out: uint32_zero };
  event e
end

transition PauseZrc2()
  RequireOwner;
  RequireNotPausedZrc2;

  is_paused_zrc2 := true;
  e = { _eventname: "PauseZrc2"; is_paused_zrc2: uint32_one };
  event e
end

transition UnPauseZrc2()
  RequireOwner;

  paused <- is_paused_zrc2;
  match paused with
  | True =>
  | False =>
    error = NotPausedZrc2;
    ThrowError error
  end;

  is_paused_zrc2 := false;
  e = { _eventname: "UnPauseZrc2"; is_paused_zrc2: uint32_zero };
  event e
end

transition ChangeAdmin(new_admin: ByStr20)
  RequireOwner;
  var_admin_address <- admin_address;
  admin_address := new_admin;
  e = {_eventname: "ChangeAdmin"; old_admin: var_admin_address; new_admin: new_admin};
  event e
end

transition ChangeOwner(new_owner: ByStr20)
  RequireOwner;
  var_staging_owner = Some {ByStr20} new_owner;
  staging_owner_address := var_staging_owner;
  var_owner_address <- owner_address;
  e = {_eventname: "ChangeOwner"; current_owner: var_owner_address; new_owner: new_owner};
  event e
end

transition ClaimOwner()
  staging_owner_o <- staging_owner_address;
  match staging_owner_o with
  | Some staging_owner =>
    is_stagingowner = builtin eq staging_owner _sender;
    match is_stagingowner with
    | True =>
      owner_address := _sender;
      tmp_staging_owner = None {ByStr20};
      staging_owner_address := tmp_staging_owner;
      e = {_eventname: "ClaimOwner"; new_owner: _sender};
      event e
    | False =>
      e = StagingOwnerValidationFailed;
      ThrowError e
    end
  | None =>
    e = StagingOwnerNotExists;
    ThrowError e
  end
end

transition ChangeAzilSSNAddress(address: ByStr20)
  RequireOwner;
  azil_ssn_address := address;
  e = { _eventname: "ChangeAzilSSNAddress"; address: address };
  event e
end

transition ChangeTreasuryAddress(address: ByStr20)
  RequireOwner;
  treasury_address := address
end

transition SetHolderAddress(address: ByStr20)
  RequireOwner;
  var_holder_addr <- holder_address;
  is_holder_empty = builtin eq var_holder_addr bystr20_zero;
  match is_holder_empty with
  | True =>
    holder_address := address;
    e = { _eventname: "SetHolderAddress"; address: address };
    event e
  | False =>
    e = HolderAlreadySet;
    ThrowError e
  end
end

transition ChangeZimplAddress(address: ByStr20)
  RequireOwner;
  zimpl_address := address;
  e = { _eventname: "ChangeZimplAddress"; address: address };
  event e
end

transition ChangeBuffers(new_buffers: List ByStr20)
  RequireOwner;
  RequireBuffers new_buffers;
  buffers_addresses := new_buffers
end

transition ChangeSSNs(new_ssn_addresses: List ByStr20)
  RequireOwner;
  ssn_addresses := new_ssn_addresses
end

(* claims buffer/holder rewards; transfer funds from buffer to holder *)
transition DrainBuffer(buffer_addr: ByStr20)
  RequireAdmin;
  buffers_addrs <- buffers_addresses;
  is_buffer = is_buffer_addr buffers_addrs buffer_addr;

  match is_buffer with
  | True =>
    holder_addr <- holder_address;
    ssnaddr <- azil_ssn_address;
    ClaimRewards holder_addr ssnaddr;
    FetchRemoteBufferExistsAtSSN buffer_addr;
    (* local_lastrewardcycle updated in FetchRemoteBufferExistsAtSSN *)
    lrc <- local_lastrewardcycle;
    RequireNotDrainedBuffer buffer_addr lrc;
    var_buffer_exists <- tmp_buffer_exists_at_ssn;
    match var_buffer_exists with
    | True =>
      ClaimRewards buffer_addr ssnaddr;
      RequestDelegatorSwap buffer_addr holder_addr;
      ConfirmDelegatorSwap buffer_addr holder_addr
    | False =>
    end
  | False =>
    e = BufferAddrUnknown;
    ThrowError e
  end;
  lrc <- local_lastrewardcycle;
  buffer_drained_cycle[buffer_addr] := lrc;
  tmp_buffer_exists_at_ssn := false
end


transition ClaimRewardsSuccessCallBack()
  RequireBufferOrHolder;
  accept;

  (* take fee from rewards *)
  var_rewards_fee <- rewards_fee;
  var_treasury_addr <- treasury_address;
  rewards_fee_value = muldiv var_rewards_fee _amount fee_denom;
  TransferFunds addfunds_tag rewards_fee_value var_treasury_addr;
  after_fee = builtin sub _amount rewards_fee_value;

  IncreaseAutoRestakeAmt after_fee
end

(* offchain-tools calls this transition every new cycle *)
transition PerformAutoRestake()
  RequireAdmin;

  auto_restake_amt <- autorestakeamount;
  IsDelegStakeSufficient auto_restake_amt;

  is_zero = builtin eq auto_restake_amt uint128_zero;
  match is_zero with
  | True =>
  | False =>
    tmp_stake_delegate_amount := auto_restake_amt;
    o_delegator = Some {ByStr20} _this_address;
    tmp_delegator := o_delegator;

    BufferDelegate auto_restake_amt
  end
end

transition IncreaseAutoRestakeAmount()
  RequireAdmin;
  accept;
  amount = _amount;

  IncreaseAutoRestakeAmt amount;

  e = { _eventname: "IncreaseAutoRestakeAmount"; amount: amount };
  event e
end

transition ChangeRewardsFee(new_fee: Uint128)
  RequireOwner;
  is_valid_fee = uint128_le new_fee fee_denom;
  match is_valid_fee with
  | False =>
    e = InvalidRewardsFee;
    ThrowError e
  | True =>
    rewards_fee := new_fee
  end
end

(* @dev: Set the staking parameters of contract. *)
(* @param min_deleg_stake: New mindelegstake value *)
transition UpdateStakingParameters(min_deleg_stake: Uint128)
  RequireOwner;
  mindelegstake := min_deleg_stake;

  e = { _eventname: "UpdateStakingParameters"; min_deleg_stake: min_deleg_stake };
  event e
end

(************************************************************)
(* @dev: Deposit undelegated zil, use our node              *)
(************************************************************)
transition DelegateStake()
  RequireNotPausedIn;

  accept;
  stake_amt = _amount;

  IsDelegStakeSufficient stake_amt;

  tmp_stake_delegate_amount := stake_amt;
  o_delegator = Some {ByStr20} _sender;
  tmp_delegator := o_delegator;

  BufferDelegate stake_amt
end

transition DelegateStakeSuccessCallBack(amount: Uint128)
  RequireBufferOrHolder;

  stake_delegate_amt <- tmp_stake_delegate_amount;
  o_delegator <- tmp_delegator;

  amount_eq = builtin eq amount stake_delegate_amt;

  match amount_eq with
  | False =>
    e = DelegStakeFundsMismatch;
    ThrowError e
  | True =>
    match o_delegator with
    | Some delegator =>
      ProcessDelegateStakeSuccessCallBack delegator amount;

      e = { _eventname: "DelegateStake"; delegator: delegator; amount: amount };
      event e
    | None =>
      e = DelegAddrUnknown;
      ThrowError e
    end
  end
end

(********************************************************************************)
(*                    ClaimWithdrawal Flow                                      *)
(*                                                                              *)
(* 1) Offchain worker calls Azil->ClaimWithdrawal()                             *)
(* 1) Azil calls Holder->CompleteWithdrawal()                                   *)
(* 2) Holder calls Zproxy->CompleteWithdrawal()                                 *)
(* 3) Zimpl do its work, then few options are possible:                         *)
(*   a) it issues NoPendingWithdrawal event                                     *)
(*   b) it calls back Holder->CompleteWithdrawalNoUnbondedStakeCallBack()       *)
(*   c) it calls subsequentally:                                                *)
(*     * Holder->AddFunds(_amount), Holder should accept it                     *)
(*     * Holder->CompleteWithdrawalSuccessCallBack(amount),                     *)
(* In case of (3c):                                                             *)
(*                                                                              *)
(* 1) Holder calls Azil->CompleteWithdrawalSuccessCallBack(_amount)             *)
(* 2) Azil accepts; then check _amount with tmp_complete_withdrawal_available   *)
(*   a) OK => workflow finished                                                 *)
(*   b) ERROR => exception                                                      *)
(*                                                                              *)
(* Completely successful chaincall will looks like                              *)
(* Worker->Azil->Holder->Zproxy->Zimpl->Holder->Azil                            *)
(*                                                                              *)
(********************************************************************************)

transition ClaimWithdrawal(blocks_to_withdraw: List BNum)
  RequireAdmin;
  FetchRemoteZimplFields;

  current_bnum <- & BLOCKNUMBER;
  current_bnum_req <- local_bnum_req;
  unbonded = leave_unbonded current_bnum current_bnum_req blocks_to_withdraw;

  tmp_complete_withdrawal_available := uint128_zero;

  forall unbonded CalculateTotalWithdrawal;

  withdraw_stake_amt <- tmp_complete_withdrawal_available;
  zero_withdraw = builtin eq withdraw_stake_amt uint128_zero;
  match zero_withdraw with
  | True =>
    e = ClaimWithdrawalNoUnbonded;
    ThrowError e
  | False =>
    (* there is something ready to withdraw completely, so we'll start the flow *)
    HolderCompleteWithdrawal
  end
end

(* @param amount: Amount of tokens to withdraw, ZIL stake amount to withdraw will be calculated basing on this parameter *)
transition WithdrawStakeAmt(amount: Uint128)
  RequireNotPausedOut;

  azil_ssn_addr <- azil_ssn_address;

  (* first we do all checks, then call Holder on success within procedure *)
  WithdrawalStakeAmt _sender amount;

  msg_to_delegator = {_tag : "WithdrawStakeAmtSuccessCallBack"; _recipient : _sender; _amount : uint128_zero;
    ssnaddr : azil_ssn_addr; amount : amount};
  msg = one_msg msg_to_delegator;
  send msg
end

transition CompleteWithdrawal()
  RequireNotPausedOut;

  wu <- withdrawal_unbonded[_sender];
  match wu with
  | Some (Withdrawal wtoken wstake) =>
    delete withdrawal_unbonded[_sender];
    e = { _eventname: "CompleteWithdrawal"; delegator: _sender; amount: wstake };
    event e;
    TransferFunds addfunds_tag wstake _sender;
    msg_to_delegator = {_tag : "CompleteWithdrawalSuccessCallBack"; _recipient : _sender; _amount : uint128_zero;
      amount : wstake};
    msg = one_msg msg_to_delegator;
    send msg
  | None =>
    msg_to_delegator = {_tag : "CompleteWithdrawalNoUnbondedStakeCallBack"; _recipient : _sender; _amount : uint128_zero;
    amount : uint128_zero};
    msg = one_msg msg_to_delegator;
    send msg;
    e = { _eventname: "NoUnbondedStake" };
    event e
  end
end

transition CompleteWithdrawalSuccessCallBack()
  RequireBufferOrHolder;

  accept;
  amount = _amount;

  (* check Azil-calculated withdrawal amount against of Zimpl *)
  withdraw_amt <- tmp_complete_withdrawal_available;
  amount_eq = builtin eq withdraw_amt amount;
  match amount_eq with
  | False =>
    e = { _eventname: "CompleteWithdrawalFundsMismatch"; amountAzil: withdraw_amt; amounthZimpl: amount };
    event e;
    e = CompleteWithdrawalFundsMismatch;
    ThrowError e
  | True =>
  end;

  tmp_complete_withdrawal_available := uint128_zero

end

(* confirms delegator's swap; could by called by anyone *)
transition ChownStakeConfirmSwap(delegator: ByStr20)
  RequireNotPausedIn;
  var_zimpl_address <- zimpl_address;

  o_zimpl_addr_test <- & var_zimpl_address as ByStr20 with contract
    field deleg_swap_request: Map ByStr20 ByStr20,
    field withdrawal_pending: Map ByStr20 (Map BNum Uint128),
    field deposit_amt_deleg: Map ByStr20 (Map ByStr20 Uint128),
    field lastrewardcycle: Uint32
  end;

  match o_zimpl_addr_test with
  | Some zimpl =>

    (* delegator must call RequestDelegatorSwap before *)
    o_deleg_swap_request <- & zimpl.deleg_swap_request[delegator];
    match o_deleg_swap_request with
    | Some new_deleg =>

      (* new_deleg must be azil buffer *)
      var_buffers_addresses <- buffers_addresses;
      is_buffer = is_buffer_addr var_buffers_addresses new_deleg;
      match is_buffer with
      | False =>
        e = BufferAddrUnknown;
        ThrowError e
      | True => (* nop *)
      end;

      (* new_deleg must be next buffer *)
      cycle <- & zimpl.lastrewardcycle;
      next_cycle = builtin add cycle uint32_one;
      next_buffer = get_active_buffer_addr var_buffers_addresses next_cycle;

      (* new_deleg must be next buffer *)
      is_next_buffer = builtin eq new_deleg next_buffer;
      match is_next_buffer with
      | False =>
        (* we'll confirm swap requests only for next buffer, reject other *)
        BufferRejectDelegatorSwap new_deleg delegator

      | True =>

        (* throw error if next buffer has not been drained still *)
        (* we'll confirm swap later *)
        RequireDrainedBuffer next_buffer cycle;

        (* delegator must have no pending withdrawals *)
        o_withdrawal <- & zimpl.withdrawal_pending[delegator];
        match o_withdrawal with
        | Some withdrawal =>
          (* reject swap for delegator with pending withdrawals*)
          BufferRejectDelegatorSwap new_deleg delegator

        | None =>

          (* sum delegator's stakes for each ssn, update token balance *)
          o_deposit_amt_deleg <- & zimpl.deposit_amt_deleg[delegator];
          match o_deposit_amt_deleg with
          | Some map_ssn_amt =>
            BufferConfirmDelegatorSwap new_deleg delegator;
            total_redeleg_amt = sum_amount map_ssn_amt;
            UpdateTokenBalance delegator total_redeleg_amt
          | None =>
            (* reject swap for delegator without deposits *)
            BufferRejectDelegatorSwap new_deleg delegator
          end

        end
      end

    | None =>
      e = ChownStakeSwapRequestNotFound;
      ThrowError e
    end

  | None =>
    e = ChownStakeCantFetchRemote;
    ThrowError e
  end
end

(* transfers funds from other ssn to azil ssn *)
transition ChownStakeReDelegate(from_ssn: ByStr20, amount: Uint128)
  RequireAdmin;
  FetchRemoteZimplFields;

  var_azil_ssn_addr <- azil_ssn_address;
  is_azil_ssn = builtin eq var_azil_ssn_addr from_ssn;
  match is_azil_ssn with
  | True =>
    e = ChownStakeReDelegateAzilSsn;
    ThrowError e
  | False =>
  end;

  var_buffers_addresses <- buffers_addresses;
  lrc <- local_lastrewardcycle;
  active_buffer = get_active_buffer_addr var_buffers_addresses lrc;
  ClaimRewards active_buffer from_ssn;
  BufferReDelegate active_buffer from_ssn var_azil_ssn_addr amount
end

(***************************************)
(*      Fungible Token Transitions     *)
(***************************************)

procedure RequireNotSender(address: ByStr20)
  is_sender = builtin eq _sender address;
  match is_sender with
  | True =>
    err = IsSender;
    ThrowError err
  | False =>
  end
end

procedure AuthorizedMoveIfSufficientBalance(from: ByStr20, to: ByStr20, amount: Uint128)
  o_from_bal <- balances[from];
  bal = option_uint128_value o_from_bal;
  can_do = uint128_le amount bal;
  match can_do with
  | True =>
    (* Subtract amount from from and add it to to address *)
    new_from_bal = builtin sub bal amount;
    balances[from] := new_from_bal;
    (* Adds amount to to address *)
    get_to_bal <- balances[to];
    new_to_bal = match get_to_bal with
    | Some bal => builtin add bal amount
    | None => amount
    end;
    balances[to] := new_to_bal
  | False =>
    (* Balance not sufficient *)
    err = InsufficientFunds;
    ThrowError err
  end
end

(* @dev: Increase the allowance of an approved_spender over the caller tokens. Only token_owner allowed to invoke.   *)
(* param spender:      Address of the designated approved_spender.                                                   *)
(* param amount:       Number of tokens to be increased as allowance for the approved_spender.                       *)
transition IncreaseAllowance(spender: ByStr20, amount: Uint128)
  RequireNotPausedZrc2;
  RequireNotSender spender;
  some_current_allowance <- allowances[_sender][spender];
  current_allowance = option_uint128_value some_current_allowance;
  new_allowance = builtin add current_allowance amount;
  allowances[_sender][spender] := new_allowance;
  e = {_eventname : "IncreasedAllowance"; token_owner : _sender; spender: spender; new_allowance : new_allowance};
  event e
end

(* @dev: Decrease the allowance of an approved_spender over the caller tokens. Only token_owner allowed to invoke. *)
(* param spender:      Address of the designated approved_spender.                                                 *)
(* param amount:       Number of tokens to be decreased as allowance for the approved_spender.                     *)
transition DecreaseAllowance(spender: ByStr20, amount: Uint128)
  RequireNotPausedZrc2;
  RequireNotSender spender;
  some_current_allowance <- allowances[_sender][spender];
  current_allowance = option_uint128_value some_current_allowance;
  new_allowance =
    let amount_le_allowance = uint128_le amount current_allowance in
      match amount_le_allowance with
      | True => builtin sub current_allowance amount
      | False => uint128_zero
      end;
  allowances[_sender][spender] := new_allowance;
  e = {_eventname : "DecreasedAllowance"; token_owner : _sender; spender: spender; new_allowance : new_allowance};
  event e
end

(* @dev: Moves an amount tokens from _sender to the recipient. Used by token_owner. *)
(* @dev: Balance of recipient will increase. Balance of _sender will decrease.      *)
(* @param to:  Address of the recipient whose balance is increased.                 *)
(* @param amount:     Amount of tokens to be sent.                                  *)
transition Transfer(to: ByStr20, amount: Uint128)
  RequireNotPausedZrc2;
  AuthorizedMoveIfSufficientBalance _sender to amount;
  e = {_eventname : "TransferSuccess"; sender : _sender; recipient : to; amount : amount};
  event e;
  (* Prevent sending to a contract address that does not support transfers of token *)
  msg_to_recipient = {_tag : "RecipientAcceptTransfer"; _recipient : to; _amount : uint128_zero;
                      sender : _sender; recipient : to; amount : amount};
  msg_to_sender = {_tag : "TransferSuccessCallBack"; _recipient : _sender; _amount : uint128_zero;
                  sender : _sender; recipient : to; amount : amount};
  msgs = two_msgs msg_to_recipient msg_to_sender;
  send msgs
end

(* @dev: Move a given amount of tokens from one address to another using the allowance mechanism. The caller must be an approved_spender. *)
(* @dev: Balance of recipient will increase. Balance of token_owner will decrease.                                                        *)
(* @param from:    Address of the token_owner whose balance is decreased.                                                                 *)
(* @param to:      Address of the recipient whose balance is increased.                                                                   *)
(* @param amount:  Amount of tokens to be transferred.                                                                                    *)
transition TransferFrom(from: ByStr20, to: ByStr20, amount: Uint128)
  RequireNotPausedZrc2;
  o_spender_allowed <- allowances[from][_sender];
  allowed = option_uint128_value o_spender_allowed;
  can_do = uint128_le amount allowed;
  match can_do with
  | True =>
    AuthorizedMoveIfSufficientBalance from to amount;
    e = {_eventname : "TransferFromSuccess"; initiator : _sender; sender : from; recipient : to; amount : amount};
    event e;
    new_allowed = builtin sub allowed amount;
    allowances[from][_sender] := new_allowed;
    (* Prevent sending to a contract address that does not support transfers of token *)
    msg_to_recipient = {_tag: "RecipientAcceptTransferFrom"; _recipient : to; _amount: uint128_zero;
                        initiator: _sender; sender : from; recipient: to; amount: amount};
    msg_to_sender = {_tag: "TransferFromSuccessCallBack"; _recipient: _sender; _amount: uint128_zero;
                    initiator: _sender; sender: from; recipient: to; amount: amount};
    msgs = two_msgs msg_to_recipient msg_to_sender;
    send msgs
  | False =>
    err = InsufficientAllowance;
    ThrowError err
  end
end
