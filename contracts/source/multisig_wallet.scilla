The MIT License

Copyright (c) 2018 - present Zilliqa Research Pte. Ltd.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

scilla_version 0

import ListUtils BoolUtils

(***************************************************)
(*               Associated library                *)
(***************************************************)
library WalletLib

(* Event for communicating a new transaction id *)
let mk_transaction_added_event =
  fun (tc : Uint32) =>
    { _eventname : "Transaction created" ;
     transactionId : tc }

(* Event for communicating that a transaction was signed *)
let mk_signed_transaction_event =
  fun (tc : Uint32) =>
    { _eventname : "Transaction signed"; transactionId : tc }

(* Event for communicating that a signature was revoked *)
let mk_signature_revoked_event =
  fun (tc : Uint32) =>
    { _eventname : "Signature revoked"; transactionId : tc }

type Error =
| NonOwnerCannotSign
| UnknownTransactionId
| InsufficientFunds
| NoSignatureListFound
| AlreadySigned
| NotAlreadySigned
| InvalidAmount
| NotEnoughSignatures
| SenderMayNotExecute
| NonOwnerCannotSubmit
| IncorrectSignatureCount

(* Error events *)
let mk_error_event =
  fun (err : Error) =>
  let err_code =
    match err with
    | NonOwnerCannotSign        => Int32 -1
    | UnknownTransactionId      => Int32 -2
    | InsufficientFunds         => Int32 -3
    | NoSignatureListFound      => Int32 -4
    | AlreadySigned             => Int32 -5
    | NotAlreadySigned          => Int32 -6
    | InvalidAmount             => Int32 -8
    | NotEnoughSignatures       => Int32 -9
    | SenderMayNotExecute       => Int32 -10
    | NonOwnerCannotSubmit      => Int32 -11
    | IncorrectSignatureCount   => Int32 -12
    end in
  { _eventname : "WalletError" ; err_code : err_code }

let t = True
let zero = Uint32 0
let one = Uint32 1
let transaction_inc = one

(* Type of transactions. *)
type CalleeTransaction =
(*****************************************************)
(*               StZIL Transitions                   *)
(*****************************************************)
(* ChangeAdmin(new_admin: ByStr20)                   *)
| ChangeAdmin of ByStr20
(* ChangeTreasuryAddress(address: ByStr20)           *)
| ChangeTreasuryAddress of ByStr20
(* ChangeWithdrawalFeeAddress(address: ByStr20)      *)
| ChangeWithdrawalFeeAddress of ByStr20
(* ChangeZimplAddress(address: ByStr20)              *)
| ChangeZimplAddress of ByStr20
(* UpdateStakingParameters(                          *)
(*                    new_mindelegstake:   Uint128,  *)
(*                    new_rewards_fee:     Uint128   *)
(*                    new_withdrawal_fee:  Uint128)  *)
| UpdateStakingParameters of Uint128 Uint128 Uint128
(* SetHolderAddress(address: ByStr20)                *)
| SetHolderAddress of ByStr20
(* ChangeBuffers(new_buffers: List ByStr20)          *)
| ChangeBuffers of (List ByStr20)
(* AddSSN(ssnaddr: ByStr20)                          *)
| AddSSN of (ByStr20)
(* RemoveSSN(ssnaddr: ByStr20)                       *)
| RemoveSSN of (ByStr20)
(* PauseIn()                                         *)
| PauseIn
(* PauseOut()                                        *)
| PauseOut
(* PauseZrc2()                                       *)
| PauseZrc2
(* UnPauseIn()                                       *)
| UnPauseIn
(* UnPauseOut()                                      *)
| UnPauseOut
(* UnPauseZrc2()                                     *)
| UnPauseZrc2
(*****************************************************)
(*               ASwap Transitions                   *)
(*****************************************************)
(* AllowToken(token_address: ByStr20)                *)
| AllowToken of ByStr20
(* DisallowToken(token_address: ByStr20)             *)
| DisallowToken of ByStr20
(* SetTreasuryFee(new_fee: Uint128)                  *)
| SetTreasuryFee of Uint128
(* SetTreasuryAddress(new_address: ByStr20           *)
| SetTreasuryAddress of ByStr20
(* SetLiquidityFee(new_fee: Uint256)                 *)
| SetLiquidityFee of Uint256
(* TogglePause()                                     *)
| TogglePause
(*****************************************************)
(*              Treasury Transitions                 *)
(*****************************************************)
(* Withdraw(recipient: ByStr20, amount: Uint128)     *)
| Withdraw of ByStr20 Uint128
(*****************************************************)
(*                SSN Transitions                    *)
(*****************************************************)
(* ChangeZproxy(new_address: ByStr20)                *)
| ChangeZproxy of ByStr20
(* UpdateReceivingAddr(new_addr: ByStr20)            *)
| UpdateReceivingAddr of ByStr20
(* UpdateComm(new_rate: Uint128)                     *)
| UpdateComm of Uint128
(* WithdrawComm()                                    *)
| WithdrawComm
(*****************************************************)
(*         StZIL/ASwap/Treasury/SSN Transitions      *)
(*****************************************************)
(* ChangeOwner(new_owner: ByStr20)                   *)
| ChangeOwner of ByStr20
(* ClaimOwner()                                      *)
| ClaimOwner


(* Type of (outstanding) transactions *)
type Transaction =
(* Transfer of native tokens *)
| NativeTransaction of ByStr20 Uint128 String
(* Custom token transactions *)
| CustomTransaction of ByStr20 CalleeTransaction

(* Make map of owners *)
let mk_owners_map =
  fun (owners : List ByStr20) =>
    let init = Emp ByStr20 Bool in
    let iter =
      fun (acc : Map ByStr20 Bool) =>
      fun (cur_owner : ByStr20) =>
        (* Add owner unconditionally. We check for duplicates later *)
        builtin put acc cur_owner t
        in
    let folder = @list_foldl ByStr20 (Map ByStr20 Bool) in
    folder iter init owners

(* Wrap single message into singleton list *)
let one_msg =
  fun (msg : Message) =>
    let nil_msg = Nil {Message} in
    Cons {Message} msg nil_msg

(* Create native transaction message as singleton list *)
let native_transaction_msg_as_list =
  fun (recipient : ByStr20) =>
  fun (amount : Uint128) =>
  fun (tag : String) =>
    let msg = {_tag : tag; _recipient : recipient; _amount : amount } in
    one_msg msg

(* Create custom transaction message as singleton list *)
let custom_transaction_msg_as_list =
  fun (calleeContract : ByStr20) =>
  fun (calleeTransaction : CalleeTransaction) =>
    let msg =
      match calleeTransaction with

      (* StZIL transitions *)

      (* ChangeAdmin(new_admin: ByStr20) *)
      | ChangeAdmin new_admin =>
        {_recipient: calleeContract ;
         _tag: "ChangeAdmin";
         _amount: Uint128 0;
         new_admin : new_admin}
      (* ChangeTreasuryAddress(address: ByStr20) *)
      | ChangeTreasuryAddress address =>
        {_recipient: calleeContract ;
         _tag: "ChangeTreasuryAddress";
         _amount: Uint128 0;
         address : address }
      (* ChangeWithdrawalFeeAddress(address: ByStr20) *)
      | ChangeWithdrawalFeeAddress address =>
        {_recipient: calleeContract ;
         _tag: "ChangeWithdrawalFeeAddress";
         _amount: Uint128 0;
         address : address }
      (* ChangeZimplAddress(address: ByStr20) *)
      | ChangeZimplAddress address =>
        {_recipient: calleeContract ;
         _tag: "ChangeZimplAddress";
         _amount: Uint128 0;
         address : address }
      (* UpdateStakingParameters(min_deleg_stake: Uint128, new_withdrawal_fee: Uint128) *)
      | UpdateStakingParameters new_mindelegstake new_rewards_fee new_withdrawal_fee =>
        {_recipient: calleeContract ;
         _tag: "UpdateStakingParameters";
         _amount: Uint128 0;
         new_mindelegstake : new_mindelegstake;
         new_rewards_fee : new_rewards_fee;
         new_withdrawal_fee : new_withdrawal_fee }
      (* SetHolderAddress(address: ByStr20) *)
      | SetHolderAddress address =>
        {_recipient: calleeContract ;
         _tag: "SetHolderAddress";
         _amount: Uint128 0;
         address : address }
      (* ChangeBuffers(new_buffers: List ByStr20) *)
      | ChangeBuffers new_buffers =>
         {_recipient: calleeContract ;
          _tag: "ChangeBuffers";
          _amount: Uint128 0;
          new_buffers : new_buffers }
      (* AddSSN(ssnaddr: ByStr20) *)
      | AddSSN ssnaddr =>
         {_recipient: calleeContract ;
          _tag: "AddSSN";
          _amount: Uint128 0;
          ssnaddr : ssnaddr }
      (* RemoveSSN(ssnaddr: ByStr20) *)
      | RemoveSSN ssnaddr =>
         {_recipient: calleeContract ;
          _tag: "RemoveSSN";
          _amount: Uint128 0;
          ssnaddr : ssnaddr }
      (* PauseIn() *)
      | PauseIn =>
        {_recipient: calleeContract ; _tag: "PauseIn"; _amount: Uint128 0 }
      (* PauseOut() *)
      | PauseOut =>
        {_recipient: calleeContract ; _tag: "PauseOut"; _amount: Uint128 0 }
      (* PauseZrc2() *)
      | PauseZrc2 =>
        {_recipient: calleeContract ; _tag: "PauseZrc2"; _amount: Uint128 0 }
      (* UnPauseIn() *)
      | UnPauseIn =>
        {_recipient: calleeContract ; _tag: "UnPauseIn"; _amount: Uint128 0 }
      (* UnPauseOut() *)
      | UnPauseOut =>
        {_recipient: calleeContract ; _tag: "UnPauseOut"; _amount: Uint128 0 }
      (* UnPauseZrc2() *)
      | UnPauseZrc2 =>
        {_recipient: calleeContract ; _tag: "UnPauseZrc2"; _amount: Uint128 0 }

      (* ASwap transitions *)

      (* AllowToken(token_address: ByStr20) *)
      | AllowToken token_address =>
        {_recipient: calleeContract ;
         _tag: "AllowToken";
         _amount: Uint128 0;
         token_address : token_address }
      (* DisallowToken(token_address: ByStr20) *)
      | DisallowToken token_address =>
        {_recipient: calleeContract ;
         _tag: "DisallowToken";
         _amount: Uint128 0;
         token_address : token_address }
      (* SetTreasuryFee(new_fee: Uint128) *)
      | SetTreasuryFee new_fee =>
        {_recipient: calleeContract ;
         _tag: "SetTreasuryFee";
         _amount: Uint128 0;
         new_fee : new_fee }
      (* SetTreasuryAddress(new_address: ByStr20) *)
      | SetTreasuryAddress new_address =>
        {_recipient: calleeContract ;
         _tag: "SetTreasuryAddress";
         _amount: Uint128 0;
         new_address : new_address }
      (* SetLiquidityFee(new_fee: Uint128) *)
      | SetLiquidityFee new_fee =>
        {_recipient: calleeContract ;
         _tag: "SetLiquidityFee";
         _amount: Uint128 0;
         new_fee : new_fee }
      (* TogglePause() *)
      | TogglePause =>
        {_recipient: calleeContract ; _tag: "TogglePause"; _amount: Uint128 0 }

      (* Treasury transitions *)

      (* Withdraw(recipient: ByStr20, amount: Uint128) *)
      | Withdraw recipient amount =>
        {_recipient: calleeContract ;
         _tag: "Withdraw";
         _amount: Uint128 0;
         recipient : recipient;
         amount : amount }

      (* SSN transitions *)

      (* ChangeZproxy(new_address: ByStr20) *)
      | ChangeZproxy new_address =>
        {_recipient: calleeContract ;
         _tag: "ChangeZproxy";
         _amount: Uint128 0;
         new_address : new_address }
      | UpdateReceivingAddr new_addr =>
        {_recipient: calleeContract ;
         _tag: "UpdateReceivingAddr";
         _amount: Uint128 0;
         new_addr : new_addr }
      | UpdateComm new_rate =>
        {_recipient: calleeContract ;
         _tag: "UpdateComm";
         _amount: Uint128 0;
         new_rate : new_rate }
      | WithdrawComm =>
        {_recipient: calleeContract ;
         _tag: "WithdrawComm";
         _amount: Uint128 0 }

      (* StZIL/ASwap/Treasury/SSN transitions *)

      (* ChangeOwner(new_owner: ByStr20) *)
      | ChangeOwner new_owner =>
        {_recipient: calleeContract ;
         _tag: "ChangeOwner";
         _amount: Uint128 0;
         new_owner : new_owner}
      (* ClaimOwner() *)
      | ClaimOwner =>
        {_recipient: calleeContract ;
         _tag: "ClaimOwner";
         _amount: Uint128 0}


      end
    in
    one_msg msg

(***************************************************)
(*             The contract definition             *)
(*                                                 *)
(* This contract holds funds that can be paid out  *)
(* to arbitrary users, provided that enough people *)
(* in the collection of owners sign off on the     *)
(* payout.                                         *)
(*                                                 *)
(* The transaction must be added to the contract   *)
(* before signatures can be collected. Once enough *)
(* signatures are collected, the recipient can ask *)
(* for the transaction to be executed and the      *)
(* money paid out.                                 *)
(*                                                 *)
(* If an owner changes his mind about a            *)
(* transaction, the signature can be revoked until *)
(* the transaction is executed.                    *)
(*                                                 *)
(* This wallet does not allow adding or removing   *)
(* owners, or changing the number of required      *)
(* signatures. To do any of those things, perform  *)
(* the following steps:                            *)
(*                                                 *)
(* 1. Deploy a new wallet with owners and          *)
(*    required_signatures set to the new values.   *)
(*    MAKE SURE THAT THE NEW WALLET HAS BEEN       *)
(*    SUCCESFULLY DEPLOYED WITH THE CORRECT        *)
(*    PARAMETERS BEFORE CONTINUING!                *)
(* 2. Invoke the SubmitTransaction transition on   *)
(*    the old wallet with the following            *)
(*    parameters:                                  *)
(*    recipient : The address of the new wallet    *)
(*    amount : The _balance of the old wallet      *)
(*    tag : "AddFunds"                             *)
(* 3. Have (a sufficient number of) the owners of  *)
(*    the old contract invoke the SignTransaction  *)
(*    transition on the old wallet. The parameter  *)
(*    transactionId should be set to the Id of the *)
(*    transaction created in step 2.               *)
(* 4. Have one of the owners of the old contract   *)
(*    invoke the ExecuteTransaction transition on  *)
(*    the old contract. This will cause the entire *)
(*    balance of the old contract to be            *)
(*    transferred to the new wallet. Note that no  *)
(*    un-executed transactions will be transferred *)
(*    to the new wallet along with the funds.      *)
(*                                                 *)
(* WARNING: If a sufficient number of owners lose  *)
(* their private keys, or for any other reason are *)
(* unable or unwilling to sign for new             *)
(* transactions, the funds in the wallet will be   *)
(* locked forever. It is therefore a good idea to  *)
(* set required_signatures to a value strictly     *)
(* less than the number of owners, so that the     *)
(* remaining owners can retrieve the funds should  *)
(* such a scenario occur.                          *)
(*                                                 *)
(* If an owner loses his private key, the          *)
(* remaining owners should move the funds to a new *)
(* wallet (using the workflow described above) to  *)
(* ensure that funds are not locked if another     *)
(* owner loses his private key. The owner who      *)
(* originally lost his private key can generate a  *)
(* new key, and the corresponding address be added *)
(* to the new wallet, so that the same set of      *)
(* persons own the new wallet.                     *)
(*                                                 *)
(***************************************************)
contract Wallet
(
owners_list         : List ByStr20,
required_signatures : Uint32
)
with
  let len = @list_length ByStr20 in
  let no_of_owners = len owners_list in
  let owners_ok = builtin lt zero no_of_owners in
  let required_sigs_not_too_low = builtin lt zero required_signatures in
  let required_sigs_too_high = builtin lt no_of_owners required_signatures in
  let required_sigs_not_too_high = negb required_sigs_too_high in
  let required_sigs_ok = andb required_sigs_not_too_high required_sigs_not_too_low in
  let all_ok = andb required_sigs_ok owners_ok in
  (* Building the owners map is expensive, so avoid checking the owners map until *)
  (* everything else has been checked *)
  match all_ok with
  | True =>
    let owners_map = mk_owners_map owners_list in
    let size_of_owners_map = builtin size owners_map in
    builtin eq size_of_owners_map no_of_owners
  | False =>
    False
  end
=>

(* adr -> True indicates an owner *)
(* adr not in map indicates non-owner *)
(* adr -> False is not used *)
field owners           : Map ByStr20 Bool = mk_owners_map owners_list

field transactionCount : Uint32 = Uint32 0

(* Collected signatures for transactions *)
field signatures       : Map Uint32 (Map ByStr20 Bool) =
  Emp Uint32 (Map ByStr20 Bool)

(* Running count of collected signatures for transactions *)
field signature_counts : Map Uint32 Uint32 =
  Emp Uint32 Uint32

(* Transactions *)
field transactions     : Map Uint32 Transaction =
                           Emp Uint32 Transaction

procedure MakeError (err : Error)
  e = mk_error_event err;
  event e
end

(* Add signature to signature list *)
procedure AddSignature (transactionId : Uint32, signee : ByStr20)
  sig <- exists signatures[transactionId][signee];
  match sig with
  | False =>
    count <- signature_counts[transactionId];
    match count with
    | None =>
      (* 0 signatures *)
      signature_counts[transactionId] := one
    | Some c =>
      new_c = builtin add c one;
      signature_counts[transactionId] := new_c
    end;
    signatures[transactionId][signee] := t;
    e = mk_signed_transaction_event transactionId;
    event e
  | True =>
    (* Already signed *)
    err = AlreadySigned;
    MakeError err
  end
end

(* Common procedure for all new transactions. *)
(* Check that the sender is owner. Store and sign the transaction. *)
procedure SubmitTransaction (transaction : Transaction)
  sender_is_owner <- exists owners[_sender];
  match sender_is_owner with
  | False =>
    err = NonOwnerCannotSubmit;
    MakeError err
  | True =>
    tc <- transactionCount;
    transactions[tc] := transaction;
    (* Sender implicitly signs *)
    AddSignature tc _sender;
    (* Increment transaction counter *)
    tc_new = builtin add tc transaction_inc;
    (* Update transaction count *)
    transactionCount := tc_new;
    (* Create event with transaction Id *)
    e = mk_transaction_added_event tc;
    event e
  end
end

(* Submit a transaction of native tokens for future signoff *)
transition SubmitNativeTransaction (recipient : ByStr20, amount : Uint128, tag : String)
  zero = Uint128 0;
  amount_is_zero = builtin eq amount zero;
  match amount_is_zero with
  | True =>
    (* Illegal transaction *)
    err = InvalidAmount;
    MakeError err
  | False =>
    transaction = NativeTransaction recipient amount tag;
    SubmitTransaction transaction
  end
end

(* Common submit procedure for custom transactions *)
procedure SubmitCustomTransaction (calleeContract : ByStr20, calleeTransaction : CalleeTransaction)
  transaction = CustomTransaction calleeContract calleeTransaction;
  SubmitTransaction transaction
end

(***************************************************)
(*               StZIL Transitions                 *)
(***************************************************)

(* Submit a new ChangeAdmin transaction for future signoff *)
transition SubmitChangeAdminTransaction (calleeContract : ByStr20, new_admin : ByStr20)
  transaction = ChangeAdmin new_admin;
  SubmitCustomTransaction calleeContract transaction
end

(* Submit a new ChangeTreasuryAddress transaction for future signoff *)
transition SubmitChangeTreasuryAddressTransaction (calleeContract : ByStr20, address : ByStr20)
  transaction = ChangeTreasuryAddress address;
  SubmitCustomTransaction calleeContract transaction
end

(* Submit a new UpdateStakingParameters transaction for future signoff *)
transition SubmitChangeWithdrawalFeeAddressTransaction (calleeContract : ByStr20, address : ByStr20)
  transaction = ChangeWithdrawalFeeAddress address;
  SubmitCustomTransaction calleeContract transaction
end

(* Submit a new ChangeZimplAddress transaction for future signoff *)
transition SubmitChangeZimplAddressTransaction (calleeContract : ByStr20, address : ByStr20)
  transaction = ChangeZimplAddress address;
  SubmitCustomTransaction calleeContract transaction
end

(* Submit a new UpdateStakingParameters transaction for future signoff *)
transition SubmitUpdateStakingParametersTransaction (calleeContract : ByStr20, new_mindelegstake : Uint128, new_rewards_fee : Uint128, new_withdrawal_fee : Uint128)
  transaction = UpdateStakingParameters new_mindelegstake new_rewards_fee new_withdrawal_fee;
  SubmitCustomTransaction calleeContract transaction
end

(* Submit a new SetHolderAddress transaction for future signoff *)
transition SubmitSetHolderAddressTransaction (calleeContract : ByStr20, address : ByStr20)
  transaction = SetHolderAddress address;
  SubmitCustomTransaction calleeContract transaction
end

(* Submit a new ChangeBuffers transaction for future signoff *)
transition SubmitChangeBuffersTransaction (calleeContract : ByStr20, new_buffers : List ByStr20)
  transaction = ChangeBuffers new_buffers;
  SubmitCustomTransaction calleeContract transaction
end

(* Submit a new AddSSN transaction for future signoff *)
transition SubmitAddSSNTransaction (calleeContract : ByStr20, ssnaddr : ByStr20)
  transaction = AddSSN ssnaddr;
  SubmitCustomTransaction calleeContract transaction
end

(* Submit a new RemoveSSN transaction for future signoff *)
transition SubmitRemoveSSNTransaction (calleeContract : ByStr20, ssnaddr : ByStr20)
  transaction = RemoveSSN ssnaddr;
  SubmitCustomTransaction calleeContract transaction
end

(* Submit a new SubmitPauseInTransaction transaction for future signoff *)
transition SubmitPauseInTransaction (calleeContract : ByStr20)
  transaction = PauseIn;
  SubmitCustomTransaction calleeContract transaction
end

(* Submit a new SubmitPauseOutTransaction transaction for future signoff *)
transition SubmitPauseOutTransaction (calleeContract : ByStr20)
  transaction = PauseOut;
  SubmitCustomTransaction calleeContract transaction
end

(* Submit a new SubmitPauseZrc2Transaction transaction for future signoff *)
transition SubmitPauseZrc2Transaction (calleeContract : ByStr20)
  transaction = PauseZrc2;
  SubmitCustomTransaction calleeContract transaction
end

(* Submit a new SubmitUnPauseInTransaction transaction for future signoff *)
transition SubmitUnPauseInTransaction (calleeContract : ByStr20)
  transaction = UnPauseIn;
  SubmitCustomTransaction calleeContract transaction
end

(* Submit a new SubmitUnPauseOutTransaction transaction for future signoff *)
transition SubmitUnPauseOutTransaction (calleeContract : ByStr20)
  transaction = UnPauseOut;
  SubmitCustomTransaction calleeContract transaction
end

(* Submit a new SubmitUnPauseZrc2Transaction transaction for future signoff *)
transition SubmitUnPauseZrc2Transaction (calleeContract : ByStr20)
  transaction = UnPauseZrc2;
  SubmitCustomTransaction calleeContract transaction
end


(***************************************************)
(*               ASwap Transitions                 *)
(***************************************************)

(* Submit a new AllowToken transaction for future signoff *)
transition SubmitAllowTokenTransaction (calleeContract : ByStr20, token_address : ByStr20)
  transaction = AllowToken token_address;
  SubmitCustomTransaction calleeContract transaction
end

(* Submit a new DisallowToken transaction for future signoff *)
transition SubmitDisallowTokenTransaction (calleeContract : ByStr20, token_address : ByStr20)
  transaction = DisallowToken token_address;
  SubmitCustomTransaction calleeContract transaction
end

(* Submit a new SetTreasuryFee transaction for future signoff *)
transition SubmitSetTreasuryFeeTransaction (calleeContract : ByStr20, new_fee : Uint128)
  transaction = SetTreasuryFee new_fee;
  SubmitCustomTransaction calleeContract transaction
end

(* Submit a new SetTreasuryAddress transaction for future signoff *)
transition SubmitSetTreasuryAddressTransaction (calleeContract : ByStr20, new_address : ByStr20)
  transaction = SetTreasuryAddress new_address;
  SubmitCustomTransaction calleeContract transaction
end

(* Submit a new SetLiquidityFee transaction for future signoff *)
transition SubmitSetLiquidityFeeTransaction (calleeContract : ByStr20, new_fee : Uint256)
  transaction = SetLiquidityFee new_fee;
  SubmitCustomTransaction calleeContract transaction
end

(* Submit a new SubmitTogglePauseTransaction transaction for future signoff *)
transition SubmitTogglePauseTransaction (calleeContract : ByStr20)
  transaction = TogglePause;
  SubmitCustomTransaction calleeContract transaction
end

(***************************************************)
(*             Treasury Transitions                *)
(***************************************************)

(* Submit a new SubmitWithdrawTransaction transaction for future signoff *)
transition SubmitWithdrawTransaction (calleeContract : ByStr20, recipient: ByStr20, amount: Uint128)
  transaction = Withdraw recipient amount;
  SubmitCustomTransaction calleeContract transaction
end

(***************************************************)
(*               SSN Transitions                   *)
(***************************************************)

(* Submit a new SubmitChangeZproxyTransaction transaction for future signoff *)
transition SubmitChangeZproxyTransaction (calleeContract : ByStr20, new_address: ByStr20)
  transaction = ChangeZproxy new_address;
  SubmitCustomTransaction calleeContract transaction
end

(* Submit a new SubmitUpdateReceivingAddrTransaction transaction for future signoff *)
transition SubmitUpdateReceivingAddrTransaction (calleeContract : ByStr20, new_addr: ByStr20)
  transaction = UpdateReceivingAddr new_addr;
  SubmitCustomTransaction calleeContract transaction
end

(* Submit a new SubmitUpdateCommTransaction transaction for future signoff *)
transition SubmitUpdateCommTransaction (calleeContract : ByStr20, new_rate: Uint128)
  transaction = UpdateComm new_rate;
  SubmitCustomTransaction calleeContract transaction
end

(* Submit a new SubmitWithdrawCommTransaction transaction for future signoff *)
transition SubmitWithdrawCommTransaction (calleeContract : ByStr20)
  transaction = WithdrawComm;
  SubmitCustomTransaction calleeContract transaction
end

(***************************************************)
(*        StZIL/ASwap/Treasury/SSN Transitions     *)
(***************************************************)

(* Submit a new ChangeOwner transaction for future signoff *)
transition SubmitChangeOwnerTransaction (calleeContract : ByStr20, new_owner : ByStr20)
  transaction = ChangeOwner new_owner;
  SubmitCustomTransaction calleeContract transaction
end

(* Submit a new ClaimOwner transaction for future signoff *)
transition SubmitClaimOwnerTransaction (calleeContract : ByStr20)
  transaction = ClaimOwner;
  SubmitCustomTransaction calleeContract transaction
end


(* Sign off on an existing transaction *)
transition SignTransaction (transactionId : Uint32)
  (* Only owners are allowed to sign off transactions *)
  sender_is_owner <- exists owners[_sender];
  match sender_is_owner with
  | False =>
    err = NonOwnerCannotSign;
    MakeError err
  | True =>
    (* Transaction must have been submitted *)
    transaction <- transactions[transactionId];
    match transaction with
    | None =>
      err = UnknownTransactionId;
      MakeError err
    | Some _ =>
      (* Remaining error cases handled by AddSignature *)
      AddSignature transactionId _sender
    end
  end
end

(* Revoke signature of existing transaction, if it has not yet been executed. *)
transition RevokeSignature (transactionId : Uint32)
  sig <- exists signatures[transactionId][_sender];
  match sig with
  | False =>
    err = NotAlreadySigned;
    MakeError err
  | True =>
    count <- signature_counts[transactionId];
    match count with
    | None =>
      err = IncorrectSignatureCount;
      MakeError err
    | Some c =>
      c_is_zero = builtin eq c zero;
      match c_is_zero with
      | True =>
        err = IncorrectSignatureCount;
        MakeError err
      | False =>
        new_c = builtin sub c one;
        signature_counts[transactionId] := new_c;
        delete signatures[transactionId][_sender];
        e = mk_signature_revoked_event transactionId;
        event e
      end
    end
  end
end

(* Delete transaction and signatures *)
procedure DeleteTransaction (transactionId : Uint32)
  delete transactions[transactionId];
  delete signatures[transactionId];
  delete signature_counts[transactionId]
end

(* Execute native token transaction. *)
(* Checks permission to execute, and checks for sufficient balance. *)
(* Assumes the transaction has been signed off by enough owners. *)
procedure ExecuteNativeTransaction (recipient : ByStr20, amount : Uint128, tag : String)
  (* Only the recipient or an owner can execute the transaction *)
  recipient_is_sender = builtin eq recipient _sender;
  sender_is_owner <- exists owners[_sender];
  sender_may_execute = orb recipient_is_sender sender_is_owner;
  match sender_may_execute with
  | False =>
    err = SenderMayNotExecute;
    MakeError err
  | True =>
    (* Check for sufficient funds  *)
    bal <- _balance;
    not_enough_money = builtin lt bal amount;
    match not_enough_money with
    | True =>
      err = InsufficientFunds;
      MakeError err
    | False =>
      (* Transaction approved, and enough money available. *)
      (* Execute transaction *)
      msgs = native_transaction_msg_as_list recipient amount tag;
      send msgs
    end
  end
end

(* Execute custom transaction. *)
(* Checks permission to execute. *)
(* Assumes the transaction has been signed off by enough owners. *)
procedure ExecuteCustomTransaction (calleeContract : ByStr20, calleeTransaction : CalleeTransaction)
  (* Only owners may execute *)
  sender_is_owner <- exists owners[_sender];
  match sender_is_owner with
  | False =>
    err = SenderMayNotExecute;
    MakeError err
  | True =>
    as_msg = custom_transaction_msg_as_list calleeContract calleeTransaction;
    send as_msg
  end
end

(* Execute signed-off transaction *)
transition ExecuteTransaction (transactionId : Uint32)
  transaction_opt <- transactions[transactionId];
  match transaction_opt with
  | None =>
    (* Transaction was not found. *)
    err = UnknownTransactionId;
    MakeError err
  | Some transaction =>
    sig_count_opt <- signature_counts[transactionId];
    match sig_count_opt with
    | None =>
      (* Signature count not found, even though the transaction exists.*)
      err = NoSignatureListFound;
      MakeError err
    | Some sig_count =>
      not_enough_signatures = builtin lt sig_count required_signatures;
      match not_enough_signatures with
      | True =>
        err = NotEnoughSignatures;
        MakeError err
      | False =>
        match transaction with
        | NativeTransaction recipient amount tag =>
          ExecuteNativeTransaction recipient amount tag
        | CustomTransaction calleeContract calleeTransaction =>
          ExecuteCustomTransaction calleeContract calleeTransaction
        end;
        (* Remove transaction and signatures. *)
        (* Note: The transaction may have failed, but without a callback *)
        (* we have no way of detecting whether it did *)
        DeleteTransaction transactionId
      end
    end
  end
end

(* Add native funds to wallet *)
transition AddFunds()
  accept;
  e = { _eventname: "FundsAdded"; sender: _sender; amount : _amount};
  event e
end
